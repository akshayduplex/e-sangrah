<%- include('../../partials/header') %>

    <!-- Page Wrapper -->
    <div class="page-wrapper">
        <div class="content">
            <!-- Breadcrumb -->
            <div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
                <div class="my-auto mb-2">
                    <h2 class="mb-1">All Documents ( <span class="totalDoc">10</span> )</h2>
                    <nav>
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item">
                                <a href="#"><i class="ti ti-smart-home"></i></a>
                            </li>
                            <li class="breadcrumb-item">Dashboard</li>
                            <li class="breadcrumb-item">Report</li>
                            <li class="breadcrumb-item">All Documents</li>
                        </ol>
                    </nav>
                </div>
                <div class="rtbtn">
                    <!-- Search -->
                    <div class="me-auto d-flex align-items-center" id="header-search">
                        <div class="input-group" style="width: 300px;">
                            <input type="text" id="searchInput" class="form-control"
                                placeholder="Search by doc, tag, metadata..">
                            <span class="input-group-text"><i class="ti ti-search"></i></span>
                        </div>
                    </div>
                    <!-- /Search -->
                </div>
            </div>
            <!-- /Breadcrumb -->
            <div class="filter-container mb-3">
                <!-- Row 1: Tabs aligned left -->
                <div class="d-flex flex-wrap gap-2 mb-2">
                    <button type="button" class="btn btn-primary rounded-pill status-tab">All</button>
                    <button type="button" class="btn btn-outline-primary rounded-pill status-tab">Pending</button>
                    <button type="button" class="btn btn-outline-primary rounded-pill status-tab">Rejected</button>
                    <button type="button" class="btn btn-outline-primary rounded-pill status-tab">Approved</button>
                    <button type="button" class="btn btn-outline-primary rounded-pill status-tab">Draft</button>
                    <button type="button" class="btn btn-outline-primary rounded-pill status-tab">Compliance and
                        Retention</button>
                </div>

                <!-- Row 2: Filters & buttons aligned right -->
                <div class="d-flex gap-2 justify-content-end align-items-end">
                    <div class="mb-0">
                        <select id="department" class="form-select select2" style="width: 200px;">
                            <option value="">-- Select Department --</option>
                        </select>
                    </div>
                    <div class=" mb-0">
                        <select id="projectName" class="form-select select2" style="width: 200px;">
                            <option value="">-- Select Project --</option>
                        </select>
                    </div>
                    <div class="mb-0 position-relative">
                        <!-- Filter Button -->
                        <div class="mb-0 position-relative">
                            <!-- Filter Button -->
                            <button class="btn btn-outline-secondary" id="columnFilterBtn">
                                <i class="ti ti-filter"></i>
                            </button>

                            <!-- Filter Dropdown -->
                            <div class="filter-dropdown d-none p-3 border rounded bg-white shadow-sm position-absolute end-0 mt-2"
                                style="z-index: 1050; min-width: 220px;">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="fileName" id="filterFileName"
                                        checked>
                                    <label class="form-check-label" for="filterFileName">File name</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="tags" id="filterTags">
                                    <label class="form-check-label" for="filterTags">Tags</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="metadata" id="filterMetadata"
                                        checked>
                                    <label class="form-check-label" for="filterMetadata">Meta data</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="ownerName"
                                        id="filterOwnerName">
                                    <label class="form-check-label" for="filterOwnerName">Owner name</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="fileType"
                                        id="filterFileType">
                                    <label class="form-check-label" for="filterFileType">File type</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="folderName"
                                        id="filterFolderName" checked>
                                    <label class="form-check-label" for="filterFolderName">Folder name</label>
                                </div>
                                <div class="mt-2 d-flex justify-content-between">
                                    <button class="btn btn-primary btn-sm" id="applyFilter">Apply</button>
                                    <button class="btn btn-sm" id="clearFilter">Clear</button>
                                </div>
                            </div>
                        </div>
                        <!-- Filter dropdown here -->
                    </div>
                    <div class="position-relative mb-0">
                        <input type="text" class="form-control datetimepicker" placeholder="Select date">
                        <span class="input-icon-addon">
                            <i class="ti ti-calendar text-gray-7"></i>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Documents Table -->
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive" id="documentsTableWrapper">
                        <table class="table table-hover datatable" id="documents_table">
                            <thead class="thead-light">
                                <tr>
                                    <th></th>
                                    <th>File Name</th>
                                    <th>Last Modified on</th>
                                    <th>Owner</th>
                                    <th>Department</th>
                                    <th>Project Name</th>
                                    <th>Shared With</th>
                                    <th>Donor</th>
                                    <th>Vendor</th>
                                    <th>Tags</th>
                                    <th>Metadata</th>
                                    <th>Description</th>
                                    <th>Remark</th>
                                    <th>Signature</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="documents_table_body"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /Documents Table -->
    </div>

    <div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
        <p class="mb-0">2025 &copy; HLFPPT.</p>
        <p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
                Technology</a></p>
    </div>
    </div>
    <!-- /Page Wrapper -->

    <%- include('../../partials/footer') %>
        <!-- <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet"> -->
        <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
        <script>
            (function ($) {
                "use strict";
                let currentDocId = null;
                let customFlatpickr = null;
                let isModalInitializing = false;
                const baseUrl = window.location.origin;
                const fileIcons = {
                    ppt: "/img/icons/fn1.png",
                    pptx: "/img/icons/fn1.png",
                    doc: "/img/icons/fn2.png",
                    docx: "/img/icons/fn2.png",
                    xls: "/img/icons/fn3.png",
                    xlsx: "/img/icons/fn3.png",
                    pdf: "/img/icons/fn4.png",
                    default: "/img/icons/fn1.png"
                };

                // -------------------------
                // Initialize Select2 with Clear Option
                // -------------------------
                function initSelect2(selector, url, placeholder, textKey) {
                    $(selector).select2({
                        placeholder: placeholder,   // Use explicit placeholder
                        allowClear: true,
                        ajax: {
                            url,
                            dataType: 'json',
                            delay: 250,
                            data: params => ({ search: params.term }),
                            processResults: data => {
                                const results = data.data.map(item => ({
                                    id: item._id,
                                    text: item[textKey]
                                }));
                                return { results };
                            }
                        }
                    });

                    // Reset selection when clearing
                    $(selector).on('select2:select', function (e) {
                        if (!e.params.data.id) {
                            $(this).val(null).trigger('change');
                        }
                    });
                }

                // Initialize
                initSelect2('#department', `${baseUrl}/api/departments/search`, 'Select Department', 'name');
                initSelect2('#projectName', `${baseUrl}/api/projects`, 'Select Project', 'projectName');



                // -------------------------
                // Initialize DataTable
                // -------------------------
                const table = $('#documents_table').DataTable({
                    serverSide: true,
                    processing: true,
                    ajax: {
                        url: `${baseUrl}/api/documents`,
                        type: 'GET',
                        data: function (d) {
                            // Determine active status tab
                            const activeTab = $('.status-tab.btn-primary').text().trim();
                            const searchValue = $('#searchInput').val()?.trim() || '';
                            const selectedDate = $('.datetimepicker').val();

                            // Column sorting info
                            const orderColumn = d.order[0]?.column;
                            const orderDir = d.order[0]?.dir || 'desc';

                            return {
                                page: (d.start / d.length) + 1,
                                limit: d.length,
                                status: activeTab === 'All' ? '' : activeTab,
                                department: $('#department').val(),
                                project: $('#projectName').val(),
                                date: selectedDate,
                                search: searchValue,
                                orderColumn,
                                orderDir
                            };
                        },
                        dataSrc: function (json) {
                            $('.totalDoc').text(json.data.pagination.totalDocuments || 0);
                            json.recordsTotal = json.data.pagination.totalDocuments || 0;
                            json.recordsFiltered = json.data.pagination.totalDocuments || 0;
                            return (json.data.documents || []).map(doc => renderRow(doc));
                        }
                    },
                    columns: [
                        { title: '', orderable: false },
                        { title: 'File Name', orderable: true },
                        { title: 'Last Modified on', orderable: true },
                        { title: 'Owner', orderable: true },
                        { title: 'Department', orderable: true },
                        { title: 'Project Name', orderable: true },
                        { title: 'Shared With', orderable: false },
                        { title: 'Donor', orderable: true },
                        { title: 'Vendor', orderable: true },
                        { title: 'Tags', orderable: true },
                        { title: 'Metadata', orderable: true },
                        { title: 'Description', orderable: false },
                        { title: 'Remark', orderable: false },
                        { title: 'Signature', orderable: false },
                        { title: 'Status', orderable: true }
                    ],
                    searching: false,
                    lengthChange: true,
                    pageLength: 10,
                    lengthMenu: [10, 25, 50, 100],
                    order: [[2, 'desc']], // default sort
                    deferRender: true,
                    stateSave: true,
                    // dom: 'lfrtip'
                    dom: "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
                    drawCallback: function () {
                        // Align info & pagination properly
                        $('#documents_table_wrapper .dataTables_paginate').addClass('float-end mt-2');
                        $('#documents_table_wrapper .dataTables_info').addClass('text-start mt-2');
                    }
                });
                // Enable Bootstrap tooltips on table redraw
                $('#documents_table').on('draw.dt', function () {
                    const tooltipTriggerList = [].slice.call(document.querySelectorAll('#documents_table [title]'));
                    tooltipTriggerList.map(function (tooltipTriggerEl) {
                        return new bootstrap.Tooltip(tooltipTriggerEl);
                    });
                });

                // -------------------------
                // Render each row
                // -------------------------
                function renderRow(doc) {
                    var fileSizeKB = doc.files[0]?.fileSize ? (doc.files[0].fileSize / 1024).toFixed(2) + ' KB' : '-';
                    const lastModified = new Date(doc.updatedAt).toLocaleString();
                    const owner = doc.owner
                        ? (() => {
                            const imgSrc = doc.owner.profile_image || '/img/users/user-08.jpg';
                            return `
        <div class="avatar-group">
          <img src="${imgSrc}" class="avatar" data-name="${doc.owner.name}" title="${doc.owner.name}" />
        </div>
      `;
                        })()
                        : '-';
                    const departmentName = doc.department?.name || '-';
                    const projectName = doc.project?.projectName || '-';
                    const tags = doc.tags?.length ? doc.tags.join(', ') : '-';
                    const description = doc.description
                        ? (() => {
                            const text = doc.description.replace(/<\/?[^>]+(>|$)/g, '');
                            return text.length > 100 ? text.substring(0, 30) + '....' : text;
                        })()
                        : '-';
                    const metadata = doc.metadata ? `${doc.metadata.fileName || '-'}, ${doc.metadata.fileDescription || '-'}` : '-';
                    const sharedWith = doc.sharedWithUsers?.length
                        ? (() => {
                            const users = doc.sharedWithUsers.slice(0, 3); // show max 3
                            const remaining = doc.sharedWithUsers.length - users.length;

                            const avatars = users.map(u => {
                                const imgSrc = u.profile_image || '/img/users/user-01.jpg';
                                return `<img src="${imgSrc}" class="avatar" data-name="${u.name}" title="${u.name}" />`;
                            }).join('');

                            const more = remaining > 0
                                ? `<div class="avatar avatar-more">+${remaining}</div>`
                                : '';

                            return `<div class="avatar-group">${avatars}${more}</div>`;
                        })()
                        : '-';
                    const donor = doc.documentDonor?.name || '-';
                    const vendor = doc.documentVendor?.name || '-';
                    const statusClass = {
                        'draft': 'bg-soft-info',
                        'pending': 'bg-soft-warning',
                        'approved': 'bg-soft-success',
                        'rejected': 'bg-soft-danger',
                        'underreview': 'bg-soft-warning',
                        'archived': 'bg-soft-secondary'
                    }[(doc.status || '').toLowerCase().replace(/\s+/g, '')] || 'bg-soft-secondary';

                    const filesInfo = doc.files?.[0]
                        ? `<div class="d-flex align-items-center">
                            <span class="avatar rounded bg-light me-2">
                                <img src="${fileIcons[doc.files[0].originalName.split('.').pop().toLowerCase()] || fileIcons.default}" style="height:30px;">
                            </span>
                            <div>
                                <p class="mb-0 text-dark">${doc.files[0].originalName}</p>
                                <small class="text-muted">${fileSizeKB}</small>
                            </div>
                        </div>`
                        : '-';

                    const dropdown = `
            <div class="btn-group" role="group">
                <button type="button" class="btn border-0" data-bs-toggle="dropdown"><i class="ti ti-settings"></i></button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="${doc.link || '#'}"><i class="ti ti-eye"></i> View</a></li>
                    <li><a class="dropdown-item" href="/documents/edit/${doc._id}"><i class="ti ti-pencil-minus"></i> Edit</a></li>
                    <li>
                        <a class="dropdown-item share-btn" href="#" data-doc-id="${doc._id}"  data-file-id="${doc.files?.[0]?._id || ''}"  data-bs-toggle="modal" data-bs-target="#sharedoc-modal">
                            <i class="ti ti-share"></i> Share
                        </a>
                    </li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#versionhistory-modal"><i class="ti ti-history"></i> Version History</a></li>
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#downloaddoc-modal"><i class="ti ti-download"></i> Download</a></li>
                    <li><a class="dropdown-item btn-delete" href="#" data-id="${doc._id}" data-bs-toggle="modal" data-bs-target="#trashdoc-modal"><i class="ti ti-trash"></i> Move to Trash</a></li>
                    <li><a class="dropdown-item archive-document" href="#"  data-id="${doc._id}" data-bs-toggle="modal" data-bs-target="#archivedoc-modal"><i class="ti ti-archive"></i> Move to Archive</a></li>
                </ul>
            </div>
        `;

                    return [
                        dropdown,
                        filesInfo,
                        lastModified,
                        owner,
                        departmentName,
                        projectName,
                        sharedWith,
                        donor,
                        vendor,
                        tags,
                        metadata,
                        description,
                        doc.comment || '-',
                        doc.signature?.fileUrl ? `<img src="${doc.signature.fileUrl}" style="height:40px;">` : '-',
                        `<span class="badge ${statusClass}">${doc.status}</span>`
                    ];
                }

                // -------------------------
                // Filters & Tabs
                // -------------------------
                $('.status-tab').on('click', function () {
                    $('.status-tab').removeClass('btn-primary').addClass('btn-outline-primary');
                    $(this).removeClass('btn-outline-primary').addClass('btn-primary');
                    table.ajax.reload();
                });

                $('#department, #projectName').on('change', function () {
                    table.ajax.reload();
                });

                $('#searchInput').on('input', debounce(() => {
                    table.ajax.reload();
                }, 500));

                $('#searchInput').on('keypress', function (e) {
                    if (e.which === 13) {
                        table.ajax.reload();
                    }
                });

                function debounce(fn, delay = 500) {
                    let timer;
                    return function (...args) {
                        clearTimeout(timer);
                        timer = setTimeout(() => fn.apply(this, args), delay);
                    };
                }

                // -------------------------
                // Delete document
                // -------------------------
                $(document).on('click', '.btn-delete', function (e) {
                    e.preventDefault();
                    const docId = $(this).data('id');
                    $('#trashdoc-modal').modal('show');

                    $('#confirm-trash-folder').off('click').on('click', function () {
                        $.ajax({
                            url: `${baseUrl}/api/documents/${docId}`,
                            type: 'DELETE',
                            success: function (response) {
                                $('#trashdoc-modal').modal('hide');
                                table.ajax.reload();
                                // show server message if available
                                showToast(response.message || 'Document moved to trash!', 'success');
                            },
                            error: function (xhr) {
                                let msg = 'Error moving document to trash.';
                                if (xhr.responseJSON && xhr.responseJSON.message) {
                                    msg = xhr.responseJSON.message; // display actual server message
                                }
                                showToast(msg, 'error');
                            }
                        });
                    });
                });

                // -------------------------
                // Archive Document
                // -------------------------
                $(document).on('click', '.archive-document', function (e) {
                    e.preventDefault();

                    const docId = $(this).data('id');
                    const docName = $(this).closest('tr').find('td:nth-child(2) p').text().trim() || 'this document';
                    const isArchived = true;

                    // Update modal text before showing
                    $('#archivedoc-modal .modal-body').text(`Are you sure you want to archive ${docName}?`);
                    $('#archivedoc-modal .modal-title').html(`<img src="/img/icons/archvbin.png"> <br>Move to Archive`);

                    // Show modal
                    $('#archivedoc-modal').modal('show');

                    // Confirm action on "Yes, Move"
                    $('#archivedoc-modal .btn-primary').off('click').on('click', function () {
                        $.ajax({
                            url: `${baseUrl}/api/documents/${docId}/archive?isArchived=${isArchived}`,
                            type: 'PATCH',
                            success: function (response) {
                                $('#archivedoc-modal').modal('hide');
                                table.ajax.reload(null, false);
                                showToast(response.message || 'Document moved to archive successfully!', 'success');
                            },
                            error: function (xhr) {
                                let msg = 'Error moving document to archive.';
                                if (xhr.responseJSON && xhr.responseJSON.message) {
                                    msg = xhr.responseJSON.message;
                                }
                                showToast(msg, 'error');
                            }
                        });
                    });
                });

                // -------------------------
                // Share document modal
                // -------------------------
                $('#sharedoc-modal').on('show.bs.modal', function (event) {
                    const button = $(event.relatedTarget);
                    currentDocId = button.data('doc-id');
                    const fileId = button.data('file-id');
                    const modal = $(this);

                    // Reset form
                    modal.find('#userInviteSelect').val('');
                    modal.find('#accessLevelSelect').val('view');
                    modal.find('input[name="time"]').prop('checked', false);
                    modal.find('#customDateWrapper').hide();
                    modal.find('#startDate').val('');
                    modal.find('#endDate').val('');
                    // modal.find('#infoText').text('Only people with access can view');

                    // Clear previous dynamic rows
                    const container = modal.find('#usersWithAccessContainer');
                    container.empty()

                    if (!currentDocId || !fileId) return;

                    // Fetch share link
                    $.ajax({
                        url: `${baseUrl}/api/documents/${currentDocId}/${fileId}/share-link`,
                        method: 'GET',
                        success: function (res) {
                            modal.find('#accessType').val('anyone'); // Default to specific users
                            modal.find('#roleType').val('viewer');
                            if (res.success && res.link) modal.find('#sharelink').val(res.link);
                        }
                    });

                    // Load shared users
                    $.ajax({
                        url: `${baseUrl}/api/documents/${currentDocId}/shared-users`,
                        method: 'GET',
                        success: function (res) {
                            if (!res.success || !res.data) return;

                            res.data.forEach(user => {
                                const checkboxId = `download-${user.userId}`;

                                // Check if user is owner
                                const isOwner = user.accessLevel === 'owner';

                                const row = `
        <div class="user-accssrow dynamic">
            <div class="empname_eml">
                <div class="fw-normal fs-18">${user.name}</div>
                <small class="fs-16">${user.email}</small>
                ${user.inviteStatus === 'pending' ? '<span class="badge bg-warning ms-2">Pending</span>' : ''}
            </div>
            <div class="d-flex align-items-center gap-4">
                ${!isOwner ? `
                    <div class="form-check form-switch">
                        <input class="form-check-input download-access" type="checkbox" id="${checkboxId}" 
                            data-user-id="${user.userId}" ${user.canDownload ? 'checked' : ''}>
                        <label class="form-check-label" for="${checkboxId}">Download</label>
                    </div>
                    <select class="form-select form-select-sm access-level" style="width:100px;" data-user-id="${user.userId}">
                        <option value="edit" ${user.accessLevel === 'edit' ? 'selected' : ''}>Edit</option>
                        <option value="view" ${user.accessLevel === 'view' ? 'selected' : ''}>View</option>
                    </select>
                ` : `
                    <div class="fw-bold fs-16 text-primary">Owner</div>
                `}
                ${!isOwner ? `<button class="btn btn-sm remvaccessbtn remove-user" data-user-id="${user.userId}">Remove</button>` : ''}
            </div>
        </div>
    `;

                                container.append(row);
                            });
                        },
                        error: function (err) {
                            console.error('Failed to load shared users:', err);
                            showToast('Failed to load shared users', 'error');
                        }
                    });

                    // Load users for invite dropdown
                    loadUsersForInvite();
                });


                // Time duration radio buttons
                // Initialize Flatpickr when "Custom" is selected
                $('#sharedoc-modal input[name="time"]').on('change', function () {
                    if ($(this).attr('id') === 'custom') {
                        $('#customDateWrapper').show();

                        if (!customFlatpickr) {
                            customFlatpickr = flatpickr("#flatpickr-range", {
                                mode: "range",
                                dateFormat: "Y-m-d"
                            });
                        }

                    } else {
                        $('#customDateWrapper').hide();
                    }
                });

                // Access type change handler
                $('#sharedoc-modal #accessType').on('change', function () {
                    const accessType = $(this).val();
                    const infoText = $('#infoText');

                    if (accessType === 'anyone') {
                        infoText.text('Anyone on the internet with the link can view');
                        $('#roleType').prop('disabled', false);
                    } else {
                        infoText.text('Only people with access can view');
                        $('#roleType').prop('disabled', false);
                    }
                });

                // Role type change handler
                $('#sharedoc-modal #roleType').on('change', function () {
                    const roleType = $(this).val();
                    const infoText = $('#infoText');
                    const accessType = $('#accessType').val();

                    if (accessType === 'anyone') {
                        if (roleType === 'viewer') {
                            infoText.text('Anyone on the internet with the link can view');
                        } else {
                            infoText.text('Anyone on the internet with the link can edit');
                        }
                    }
                });

                // Invite user button
                $('#sharedoc-modal').on('click', '#inviteUserBtn', function () {
                    const $btn = $(this);
                    $btn.prop('disabled', true).addClass('btn-light').removeClass('btn-primary');

                    const userEmail = $('#userInviteSelect').val();
                    const accessLevel = $('#accessLevelSelect').val();
                    const duration = $('input[name="time"]:checked').attr('id');

                    let customStart = null;
                    let customEnd = null;

                    // Read dates from Flatpickr range if "Custom" is selected
                    if (duration === 'custom' && customFlatpickr?.selectedDates.length === 2) {
                        customStart = customFlatpickr.selectedDates[0].toISOString();
                        customEnd = customFlatpickr.selectedDates[1].toISOString();
                    }

                    if (!currentDocId) {
                        showToast('No document selected', 'info');
                        resetBtn();
                        return;
                    }

                    if (!userEmail) {
                        showToast('Please enter user email', 'info');
                        resetBtn();
                        return;
                    }

                    if (!$('input[name="time"]:checked').length) {
                        showToast('Please select a time duration', 'info');
                        resetBtn();
                        return;
                    }

                    if (duration === 'custom' && (!customStart || !customEnd)) {
                        showToast('Please select a start and end date for custom duration', 'info');
                        resetBtn();
                        return;
                    }

                    const inviteData = {
                        userEmail: userEmail,
                        accessLevel: accessLevel,
                        duration: duration
                    };

                    if (duration === 'custom') {
                        inviteData.customStart = customStart;
                        inviteData.customEnd = customEnd;
                    }

                    $.ajax({
                        url: `${baseUrl}/api/documents/${currentDocId}/invite`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(inviteData),
                        success: function (response) {
                            showToast('Invitation sent successfully!', 'success');
                            $('#userInviteSelect').val(''); // Clear the input
                            $('#sharedoc-modal').modal('hide');
                        },
                        error: function (err) {
                            const errorMsg = err.responseJSON?.message || 'Failed to send invitation';
                            showToast(errorMsg, 'error');
                        },
                        complete: function () {
                            resetBtn();
                        }
                    });

                    function resetBtn() {
                        $btn.prop('disabled', false).removeClass('btn-light').addClass('btn-primary');
                    }
                });                // Remove user access using custom confirmation modal
                $('#sharedoc-modal').on('click', '.remove-user', function () {
                    const userId = $(this).data('user-id');
                    const userRow = $(this).closest('.user-accssrow');

                    if (!currentDocId || !userId) {
                        userRow.remove();
                        return;
                    }

                    // Update modal content dynamically for removing user access
                    $('#trashdocLabel').html(`
        <img src="/img/icons/bin.png" alt="Remove User" width="40" class="mb-2"><br>
        Remove User Access
    `);
                    $('#trashdoc-modal .modal-body').text(
                        'Are you sure you want to remove this user’s access to the document? This action cannot be undone.'
                    );
                    $('#confirm-trash-folder').text('Yes, Remove');

                    // Show confirmation modal
                    $('#trashdoc-modal').modal('show');

                    // Ensure previous click handler is removed before reattaching
                    $('#confirm-trash-folder').off('click').on('click', function () {
                        $.ajax({
                            url: `${baseUrl}/api/documents/share/${currentDocId}`,
                            method: 'DELETE',
                            contentType: 'application/json',
                            data: JSON.stringify({ userId: userId }),
                            success: function () {
                                userRow.remove();
                                $('#trashdoc-modal').modal('hide'); // Hide modal after success
                                showToast('User access removed successfully!', 'success');
                            },
                            error: function (err) {
                                $('#trashdoc-modal').modal('hide');
                                showToast(
                                    err.responseJSON?.message || 'Failed to remove user access',
                                    'error'
                                );
                            }
                        });
                    });
                });
                // Share button in footer
                $('#sharedoc-modal .modal-footer .site-btnmd').on('click', function () {
                    if (!currentDocId) {
                        showToast('No document selected', 'info');
                        return;
                    }

                    // Collect all users with access from modal
                    const users = $('#usersWithAccessContainer .user-accssrow').map(function () {
                        const userId = $(this).find('.access-level').data('user-id');
                        const accessLevel = $(this).find('.access-level').val();
                        const canDownload = $(this).find('.download-access').is(':checked');
                        return { userId, accessLevel, canDownload };
                    }).get(); // convert to plain array

                    if (users.length === 0) {
                        showToast('Please add at least one user to share with', 'info');
                        return;
                    }

                    // Prepare general access info
                    const accessType = $('#accessType').val();
                    const roleType = $('#roleType').val();
                    const generalAccess = accessType === 'anyone';
                    const generalRole = roleType; // 'viewer' or 'editor'

                    const data = {
                        users,
                        generalAccess,
                        generalRole
                    };

                    $.ajax({
                        url: `${baseUrl}/api/documents/${currentDocId}/permissions`,
                        method: 'PATCH',
                        contentType: 'application/json',
                        data: JSON.stringify(data),
                        success: function (res) {
                            showToast(res.message || 'Permissions updated successfully!', 'success');
                            $('#sharedoc-modal').modal('hide');

                            if (typeof table !== 'undefined' && table.ajax?.reload) {
                                table.ajax.reload(null, false); // reload table without resetting pagination
                            }
                        },
                        error: function (err) {
                            showToast(err.responseJSON?.message || 'Failed to update permissions', 'error');
                        }
                    });
                });


                // -------------------------
                // Load version history into modal
                // -------------------------
                $('#versionhistory-modal').on('show.bs.modal', function (event) {
                    const button = $(event.relatedTarget);
                    const docId = button.closest('tr').find('.btn-delete').data('id');
                    if (!docId) return;

                    currentDocId = docId;
                    const versionList = $(this).find('.version-list');
                    versionList.html('<p class="text-center">Loading...</p>');

                    $.ajax({
                        url: `${baseUrl}/api/documents/${docId}/versions/history`,
                        method: 'GET',
                        success: function (res) {
                            if (!res.success || !res.data) {
                                versionList.html('<p class="text-danger">No version history found.</p>');
                                return;
                            }

                            versionList.empty();
                            res.data.versionHistory.forEach(item => {
                                const modifiedDate = new Date(item.timestamp).toLocaleString();

                                // Only show restore button if not version 1.0
                                const restoreButton = item.version !== "1.0"
                                    ? `<button class="btn btn-outline-light rounded-pill btn-restore-version" 
        data-version="${item.version}" 
        data-previous-version="${item.previousVersion}">
        Restore to v${item.previousVersion}
    </button>`
                                    : '';

                                const html = `
        <div class="version-item border-bottom pb-3 mb-3">
            <div class="dflexbtwn align-items-start">
                <div class="flxtblleft">
                    <span class="avatar rounded bg-light mb-2">
                        <img src="${item.changedBy?.avatar || '/img/icons/fn2.png'}" alt="User">
                    </span>
                    <div class="flxtbltxt">
                        <p class="fs-18 mb-1 fw-normal">
                            ${res.data.documentName} v${item.version}
                            ${item.isCurrent ? '<span class="badge bg-success ms-2">Current</span>' : ''}
                        </p>
                        <span class="fs-16 fw-normal d-block mb-2">
                            Modified by ${item.changedBy?.name || 'Unknown'}
                        </span>
                        <h5 class="fs-18 fw-light text-black mb-3">
                            ${item.changes || 'Updated document'}
                        </h5>
                        <div class="version-actions">
                            <button class="site-btnmd fw-light btn-view-version" data-version="${item.version}">
                                View
                            </button>
                            ${restoreButton}
                        </div>
                    </div>
                </div>
                <p class="text-muted">Modified on ${modifiedDate}</p>
            </div>
        </div>
    `;
                                versionList.append(html);
                            });
                        },
                        error: function () {
                            versionList.html('<p class="text-danger">Failed to load version history.</p>');
                        }
                    });
                });
                // -------------------------
                // Handle View & Restore buttons
                // -------------------------
                $(document).on('click', '.btn-view-version', function () {
                    const version = $(this).data('version');
                    if (!currentDocId || !version) return;

                    // Open the version view page
                    window.location.href = `/documents/${currentDocId}/versions/view?version=${version}`;
                });

                let restoreTarget = {}; // Temporarily store doc ID and version

                $(document).on('click', '.btn-restore-version', function () {
                    const version = $(this).data('version');
                    const previousVersion = $(this).data('previous-version');
                    if (!currentDocId || !previousVersion) return;

                    restoreTarget = { docId: currentDocId, version: previousVersion };

                    // Update modal title and body dynamically
                    $('#restore-folder-modal .modal-title').html(`
        <img src="/img/icons/restore.png" alt="Restore Icon" width="32" class="me-2">
        Restore Version
    `);

                    $('#restore-folder-modal .modal-body').text(
                        `Are you sure you want to restore this document to version ${previousVersion}?`
                    );

                    // Show the modal
                    $('#restore-folder-modal').modal('show');
                });
                $('#confirm-restore-folder').on('click', function () {
                    if (!restoreTarget.docId || !restoreTarget.version) return;

                    $.ajax({
                        url: `${baseUrl}/api/documents/${restoreTarget.docId}/versions/${restoreTarget.version}/restore`,
                        method: 'PATCH',
                        success: function (res) {
                            showToast(res.message || `Restored to version ${restoreTarget.version}`, 'success');
                            $('#restore-folder-modal').modal('hide');
                            table.ajax.reload(); // reload table so status/files update
                        },
                        error: function (err) {
                            showToast(err.responseJSON?.message || 'Failed to restore version', 'error');
                        }
                    });
                });

                // Copy share link to clipboard
                $('#sharedoc-modal').on('click', '#copyLinkBtn', function () {
                    const linkInput = $('#sharelink');
                    if (!linkInput.val()) {
                        showToast('No link available to copy', 'info');
                        return;
                    }

                    // Select the text
                    linkInput.select();
                    linkInput[0].setSelectionRange(0, 99999); // For mobile devices

                    // Copy to clipboard
                    navigator.clipboard.writeText(linkInput.val())
                        .then(() => {
                            showToast('Link copied to clipboard!', 'success');
                        })
                        .catch(() => {
                            showToast('Failed to copy link', 'error');
                        });
                });

                // Function to load users for invite dropdown
                function loadUsersForInvite() {
                    $.ajax({
                        url: `${baseUrl}/api/user`, // Make sure this endpoint exists
                        method: 'GET',
                        success: function (response) {
                            const select = $('#userInviteSelect');
                            select.empty();

                            if (response.data && response.data.length) {
                                response.data.forEach(user => {
                                    select.append(`<option value="${user.email}">${user.name} (${user.email})</option>`);
                                });
                            }
                        },
                        error: function (err) {
                            console.error('Failed to load users:', err);
                        }
                    });
                }
            })(jQuery);
        </script>