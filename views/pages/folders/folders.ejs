<%- include('../../partials/header') %>

	<div class="page-wrapper">
		<div class="content">
			<!-- Breadcrumb -->
			<div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
				<div class="my-auto mb-2">
					<h2 class="mb-1">Folders</h2>
					<nav>
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item"><a href="#"><i class="ti ti-smart-home"></i></a></li>
							<li class="breadcrumb-item">Dashboard</li>
							<li class="breadcrumb-item">Add Document</li>
							<li class="breadcrumb-item">Folder</li>
						</ol>
					</nav>
				</div>
				<div class="rtbtn">
					<a href="#" class="btn btn-primary btn-lg rounded-pill me-2 mb-2 btn-add-folder">
						<i class="ti ti-plus me-1"></i> Create Folder
					</a>
				</div>
			</div>

			<!-- Directory Path -->
			<div id="uploadDirectoryPath" class="mb-3 p-2 bg-light rounded"></div>

			<!-- Folder Container -->
			<div class="row g-3" id="folder-container"></div>


			<!-- Loading -->
			<div id="folder-loading" class="text-center py-4" style="display:none;">
				<div class="spinner-border text-primary"></div>
				<p class="mt-2 text-muted">Loading folders...</p>
			</div>

			<!-- Empty -->
			<div id="folder-empty" class="text-center py-4" style="display:none;">
				<i class="ti ti-folder-off fs-1 text-muted"></i>
				<p class="mt-2 text-muted">No subfolders found</p>
			</div>
		</div>

		<!-- Footer -->
		<div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
			<p class="mb-0">2025 &copy; HLFPPT.</p>
			<p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
					Technology</a></p>
		</div>
	</div>

	<!-- Modals -->
	<%- include('../../modals/addFolder') %>
		<%- include('../../partials/footer') %>
			<script>
				const folderState = {
					selectedFolders: [],
					currentFolderId: null,
					isLoading: false
				};

				const elements = {
					container: document.getElementById('folder-container'),
					loading: document.getElementById('folder-loading'),
					empty: document.getElementById('folder-empty'),
					path: document.getElementById('uploadDirectoryPath'),
				};

				let pendingFolderId = null;
				let editingFolderId = null;

				// Toast helper
				function showToast(message, type = "success") {
					const toastId = "toast-" + Date.now();
					const html = `
      <div id="${toastId}" class="toast align-items-center text-bg-${type} border-0" role="alert">
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
      </div>`;
					document.body.insertAdjacentHTML("beforeend", html);
					const el = document.getElementById(toastId);
					const toast = new bootstrap.Toast(el, { delay: 3000 });
					toast.show();
					el.addEventListener("hidden.bs.toast", () => el.remove());
				}

				// States
				const setLoadingState = (loading) => {
					folderState.isLoading = loading;
					elements.loading.style.display = loading ? 'block' : 'none';
					elements.container.style.display = loading ? 'none' : 'block';
					elements.empty.style.display = 'none';
				};

				const setEmptyState = (isEmpty) => {
					elements.empty.style.display = isEmpty ? 'block' : 'none';
					elements.container.style.display = isEmpty ? 'none' : 'block';
					elements.loading.style.display = 'none';
				};

				// Fetch folders
				const fetchFolders = async (parentFolderId = null) => {
					const queryParams = new URLSearchParams();
					if (parentFolderId) queryParams.append('folderId', parentFolderId);
					const response = await fetch(`/api/folders/tree/structure?${queryParams}`);
					if (!response.ok) throw new Error(`HTTP error! ${response.status}`);
					const data = await response.json();
					if (!data.success) throw new Error(data.message || 'API request failed');
					return data.tree || [];
				};

				// Get subfolders
				const getSubfolders = (folders, targetFolderId) => {
					if (!targetFolderId) return folders;
					const findFolderAndGetChildren = (list, id) => {
						for (const folder of list) {
							if (folder._id === id) return folder.children || [];
							if (folder.children?.length) {
								const res = findFolderAndGetChildren(folder.children, id);
								if (res) return res;
							}
						}
						return [];
					};
					return findFolderAndGetChildren(folders, targetFolderId);
				};

				// Render folders
				const loadFolders = async (parentFolderId = null, parentPath = []) => {
					try {
						setLoadingState(true);
						const allFolders = await fetchFolders(null);
						setLoadingState(false);

						const subfolders = getSubfolders(allFolders, parentFolderId);
						if (!subfolders.length) {
							setEmptyState(true);
							elements.container.innerHTML = "";
							folderState.currentFolderId = parentFolderId;
							folderState.selectedFolders = parentPath;
							updateDirectoryPath();
							return;
						}

						setEmptyState(false);
						elements.container.innerHTML = "";

						subfolders.forEach(folder => {
							const div = document.createElement("div");
							div.className = "folderbox m-2";
							div.dataset.id = folder._id;
							div.innerHTML = `
              <div class="fldricon">
                <img src="/img/icons/folder.png" alt="Folder">
              </div>
              <div class="fldrname">
                <p>${folder.name}</p>
              </div>
              <div class="folder_links">
                <button type="button" class="btn border-0" data-bs-toggle="dropdown" aria-expanded="false">
                  <i class="ti ti-dots"></i>
                </button>
                <ul class="dropdown-menu" data-bs-auto-close="outside">
                  <li><a class="dropdown-item" href="/${folder._id}/list"><i class="ti ti-eye"></i> View</a></li>
                  <li><a class="dropdown-item rename-folder" href="#"><i class="ti ti-pencil-minus"></i> Edit</a></li>
                  <li><a class="dropdown-item delete-folder" href="#" data-bs-toggle="modal" data-bs-target="#trashdoc-modal"><i class="ti ti-trash"></i> Move to Trash</a></li>
                  <li><a class="dropdown-item archive-folder" href="#" data-bs-toggle="modal" data-bs-target="#archivedoc-modal"><i class="ti ti-archive"></i> Move to Archive</a></li>
                  <li><a class="dropdown-item download-folder" href="#" data-bs-toggle="modal" data-bs-target="#downloaddoc-modal"><i class="ti ti-download"></i> Download</a></li>
                </ul>
              </div>`;
							elements.container.appendChild(div);

							div.addEventListener("dblclick", () => {
								loadFolders(folder._id, [...parentPath, { id: folder._id, name: folder.name }]);
							});
						});

						folderState.currentFolderId = parentFolderId;
						folderState.selectedFolders = parentPath;
						updateDirectoryPath();
					} catch (err) {
						setLoadingState(false);
						showToast("Error loading folders", "danger");
					}
				};

				// Update breadcrumb
				const updateDirectoryPath = () => {
					const folders = folderState.selectedFolders;
					if (!folders.length) {
						elements.path.innerHTML = '<span class="text-muted">Root</span>';
						return;
					}
					elements.path.innerHTML = folders.map(f => f.name).join(" / ");
				};

				// Modal elements
				const createFolderForm = document.getElementById("folderForm");
				const folderNameInput = document.getElementById("folderName");
				const folderModalTitle = document.getElementById("folder-modal-title");
				const folderModalSubmit = document.getElementById("folderFormSubmit");

				// Form submit (Add/Edit)
				createFolderForm.addEventListener("submit", async (e) => {
					e.preventDefault();
					const name = folderNameInput.value.trim();
					if (!name) return;

					try {
						const url = editingFolderId ? `/api/folders/${editingFolderId}/rename` : "/api/folders";
						const method = editingFolderId ? "PATCH" : "POST";
						const body = { name, parentId: folderState.currentFolderId };

						const res = await fetch(url, {
							method,
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify(body)
						});
						const data = await res.json();
						if (!data.success) throw new Error(data.message);

						showToast(editingFolderId ? "Folder renamed" : "Folder created");
						bootstrap.Modal.getInstance(document.getElementById("folder-modal")).hide();
						editingFolderId = null;
						loadFolders(folderState.currentFolderId, folderState.selectedFolders);
					} catch (err) {
						showToast("Error saving folder", "danger");
					}
				});

				// Dropdown actions
				elements.container.addEventListener("click", (e) => {
					const link = e.target.closest("a");
					if (!link) return;
					const folderBox = link.closest(".folderbox");
					if (!folderBox) return;
					const id = folderBox.dataset.id;

					if (link.classList.contains("rename-folder")) {
						editingFolderId = id;
						folderNameInput.value = folderBox.querySelector(".fldrname p").textContent;
						folderModalTitle.textContent = "Edit Folder";
						folderModalSubmit.textContent = "Save";
						new bootstrap.Modal("#folder-modal").show();
					}
					if (link.classList.contains("delete-folder")) pendingFolderId = id;
					if (link.classList.contains("archive-folder")) pendingFolderId = id;
					if (link.classList.contains("download-folder")) pendingFolderId = id;
				});

				// Confirm Trash
				document.getElementById("confirm-trash-folder")?.addEventListener("click", async () => {
					if (!pendingFolderId) return;
					try {
						const res = await fetch(`/api/folders/${pendingFolderId}`, { method: "DELETE" });
						const data = await res.json();

						if (!data.success) {
							// Show the exact backend message
							showToast(data.message || "Failed to delete folder", "warning");
							return; // stop further execution
						}

						// Success
						showToast(data.message || "Folder deleted successfully"); // backend message or default
						loadFolders(folderState.currentFolderId, folderState.selectedFolders);

					} catch (err) {
						// Fallback in case fetch/network fails
						showToast(err.message || "Failed to delete folder", "warning");

					} finally {
						pendingFolderId = null;
						bootstrap.Modal.getInstance(document.getElementById("trashdoc-modal")).hide();
					}
				});


				// Confirm Archive
				document.querySelector("#archivedoc-modal .btn.btn-primary")?.addEventListener("click", async () => {
					if (!pendingFolderId) return;
					try {
						const res = await fetch(`/api/folders/${pendingFolderId}/archive`, { method: "PATCH" });
						const data = await res.json();
						if (!data.success) throw new Error(data.message);
						showToast("Folder archived");
						loadFolders(folderState.currentFolderId, folderState.selectedFolders);
					} catch (err) {
						showToast("Failed to archive folder", "danger");
					} finally {
						pendingFolderId = null;
						bootstrap.Modal.getInstance(document.getElementById("archivedoc-modal")).hide();
					}
				});

				// Confirm Restore
				document.getElementById("confirm-restore-folder")?.addEventListener("click", async () => {
					if (!pendingFolderId) return;
					try {
						const res = await fetch(`/api/folders/${pendingFolderId}/restore`, { method: "PATCH" });
						const data = await res.json();
						if (!data.success) throw new Error(data.message);
						showToast("Folder restored");
						loadFolders(folderState.currentFolderId, folderState.selectedFolders);
					} catch (err) {
						showToast("Failed to restore folder", "danger");
					} finally {
						pendingFolderId = null;
						bootstrap.Modal.getInstance(document.getElementById("restore-folder-modal")).hide();
					}
				});

				// Confirm Download
				document.getElementById("confirmDownload")?.addEventListener("click", async () => {
					if (!pendingFolderId) return;
					try {
						const res = await fetch(`/api/folders/${pendingFolderId}/download`);
						if (!res.ok) throw new Error("Download failed");
						showToast("Download started");
					} catch (err) {
						showToast("Failed to download folder", "danger");
					} finally {
						pendingFolderId = null;
						bootstrap.Modal.getInstance(document.getElementById("downloaddoc-modal")).hide();
					}
				});

				// Add Folder button
				document.addEventListener("DOMContentLoaded", () => {
					document.querySelector(".btn-add-folder").addEventListener("click", () => {
						editingFolderId = null;
						createFolderForm.reset();
						folderModalTitle.textContent = "Add Folder";
						folderModalSubmit.textContent = "Create";
						new bootstrap.Modal("#folder-modal").show();
					});
					loadFolders();
				});
			</script>

			<style>
				.folderbox {
					display: inline-block;
					width: 120px;
					text-align: center;
					padding: 10px;
					margin: 8px;
					border: 1px solid #dee2e6;
					border-radius: 6px;
					cursor: pointer;
					transition: 0.2s;
				}

				.folderbox:hover {
					transform: translateY(-2px);
					box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
				}

				.fldricon img {
					width: 40px;
					height: 40px;
				}

				.fldrname p {
					margin: 5px 0 0;
					font-size: 0.875rem;
					white-space: nowrap;
					overflow: hidden;
					text-overflow: ellipsis;
				}
			</style>