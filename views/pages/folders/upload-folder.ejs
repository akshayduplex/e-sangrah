<%- include('../../partials/header') %>

	<!-- Page Wrapper -->
	<div class="page-wrapper">
		<div class="content">
			<!-- Breadcrumb -->
			<div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
				<div class="my-auto mb-2">
					<h2 class="mb-1">Upload Folder</h2>
					<nav>
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item">
								<a href="#"><i class="ti ti-smart-home"></i></a>
							</li>
							<li class="breadcrumb-item">
								Dashboard
							</li>
							<li class="breadcrumb-item">
								Upload Folder
							</li>
						</ol>
					</nav>
				</div>
			</div>

			<!-- Upload Box -->
			<div class="my-4">
				<div class="col-md-12">
					<div class="upload-box mb-3" id="uploadBox">
						<i class="ti ti-cloud-upload fa-2x text-primary mb-2"></i>
						<p class="mb-1"><strong>Click to upload folder</strong> or drag and drop file here</p>
						<small class="text-muted" id="storageInfo">Max 10GB total storage. DOCX / PPTX / CSV /
							PDF</small>
						<input type="file" class="form-control d-none" id="fileInput" multiple>
					</div>
					<div id="fileList" class="row g-2"></div>
				</div>

				<!-- Folder Display -->
				<div class="mb-3 p-2 bg-light rounded" id="folderPathContainer">
					<div id="folder-no-project" class="text-center py-2 d-none">
						<h6 class="text-muted mb-0">Please select a project first</h6>
					</div>
					<div id="folder-container" class="row g-2"></div>
					<div id="folder-loading" class="text-center py-3 d-none">
						<div class="spinner-border spinner-border-sm text-primary"></div>
						<p class="mt-1 text-muted small">Loading folders...</p>
					</div>
					<div id="folder-empty" class="text-center py-3 d-none">
						<i class="ti ti-folder-off fs-3 text-muted"></i>
						<p class="mt-1 text-muted small">No subfolders found</p>
					</div>
				</div>
				<div class="col-md-12 ">
					<div class="my-4">
						<button id="uploadBtn" class="btn btn-primary rounded-pill">Upload Folder</button>
					</div>
				</div>
			</div>
		</div>
		<div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
			<p class="mb-0">2025 &copy; HLFPPT.</p>
			<p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
					Technology</a></p>
		</div>
	</div>
	<!-- /Page Wrapper -->

	<%- include('../../partials/footer') %>


		<script>
			// ---------------- FOLDER LOADING ----------------
			const folderState = { selectedFolders: [], currentFolderId: null };
			const storageInfoEl = document.getElementById("storageInfo");
			const elements = {
				container: document.getElementById('folder-container'),
				loading: document.getElementById('folder-loading'),
				empty: document.getElementById('folder-empty'),
				noProject: document.getElementById('folder-no-project')
			};
			async function updateStorageInfo() {
				try {
					const res = await fetch(`/api/storage/usage`, { credentials: 'include' });
					const data = await res.json();
					if (data.success) {
						storageInfoEl.textContent = `Used: ${data.usedGB} GB / Total: ${data.maxGB} GB / Remaining: ${data.remainingGB} GB`;
					}
				} catch (err) {
					console.error(err);
					storageInfoEl.textContent = "Failed to load storage info";
				}
			}
			const setLoadingState = (loading) => {
				elements.loading.classList.toggle('d-none', !loading);
				elements.container.classList.toggle('d-none', loading);
				elements.empty.classList.add('d-none');
			};
			const setEmptyState = (empty) => {
				elements.empty.classList.toggle('d-none', !empty);
				elements.container.classList.toggle('d-none', empty);
				elements.loading.classList.add('d-none');
			};
			const showNoProject = (show) => elements.noProject.classList.toggle('d-none', !show);

			const fetchFolders = async (projectId) => {
				if (!projectId) return [];
				try {
					const res = await fetch(`/api/folders/tree/structure?projectId=${projectId}`, { credentials: 'include' });
					const data = await res.json();
					return data.success ? data.tree || [] : [];
				} catch (err) {
					console.error("Error fetching folders:", err);
					return [];
				}
			};

			const getSubfolders = (folders, id) => {
				if (!id) return folders;
				const find = (list) => {
					for (const f of list) {
						if (f._id === id) return f.children || [];
						if (f.children?.length) {
							const res = find(f.children);
							if (res) return res;
						}
					}
					return [];
				};
				return find(folders);
			};

			const loadFolders = async (parentId = null, parentPath = [], projectId = null) => {
				projectId = projectId || window.selectedProjectId;
				if (!projectId) { showNoProject(true); return; }

				showNoProject(false);
				setLoadingState(true);

				try {
					const allFolders = await fetchFolders(projectId);
					setLoadingState(false);

					const subfolders = getSubfolders(allFolders, parentId);
					if (!subfolders.length) { setEmptyState(true); return; }
					setEmptyState(false);
					elements.container.innerHTML = '';
					// After folder load
					subfolders.forEach(f => {
						const div = document.createElement('div');
						div.className = "col-6 col-md-4 col-lg-2 text-center p-2 bg-white rounded shadow-sm cursor-pointer";
						div.dataset.id = f._id;
						div.innerHTML = `
        <img src="/img/icons/folder.png" class="mb-1" style="width:50px">
        <p class="mb-0 small">${f.name}</p>
    `;

						// Click to select
						div.addEventListener('click', () => {
							folderState.currentFolderId = f._id;
							highlightSelectedFolder(div);
							updateUploadState();
						});

						// Double-click to open
						div.addEventListener('dblclick', () => loadFolders(f._id, [...parentPath, { id: f._id, name: f.name }], projectId));

						elements.container.appendChild(div);
					});
					folderState.currentFolderId = parentId;
					folderState.selectedFolders = parentPath;
				} catch (err) { console.error(err); setLoadingState(false); }
			};

			// ---------------- UPLOAD BOX ----------------
			const uploadBox = document.getElementById("uploadBox");
			const fileInput = document.getElementById("fileInput");
			const fileList = document.getElementById("fileList");
			const totalProgressBar = document.getElementById("totalProgressBar");

			let totalBytes = 0;
			let uploadedBytes = 0;

			// Open file dialog
			uploadBox.addEventListener("click", () => fileInput.click());
			uploadBox.addEventListener("dragover", (e) => {
				e.preventDefault();
				if (!folderState.currentFolderId) return;
				uploadBox.classList.add("dragover");
			});

			uploadBox.addEventListener("dragleave", () => uploadBox.classList.remove("dragover"));
			uploadBox.addEventListener("drop", (e) => {
				e.preventDefault();
				uploadBox.classList.remove("dragover");
				handleFiles(e.dataTransfer.files);
			});
			fileInput.addEventListener("change", () => {
				handleFiles(fileInput.files);
				fileInput.value = ""; // allow reselecting same file
			});
			const updateUploadState = () => {
				if (folderState.currentFolderId) {
					uploadBox.classList.remove('disabled');
				} else {
					uploadBox.classList.add('disabled');
				}
			};
			function highlightSelectedFolder(folderDiv) {
				document.querySelectorAll('#folder-container .selected').forEach(el => el.classList.remove('selected'));
				folderDiv.classList.add('selected');
			}

			// Inside folder rendering
			div.addEventListener('click', () => {
				folderState.currentFolderId = f._id;
				highlightSelectedFolder(div);
				updateUploadState();
			});

			// ---------------- HANDLE FILES ----------------
			function handleFiles(files) {
				const folderId = folderState.currentFolderId;
				if (!folderId) {
					alert("Please select a folder first.");
					return;
				}

				[...files].forEach((file) => {
					const fileId = Date.now() + Math.random();
					totalBytes += file.size;

					const fileItem = document.createElement("div");
					fileItem.classList.add("file-item", "col-sm-5", "mb-2");
					fileItem.dataset.id = fileId;

					let iconClass = "fa-folder";
					if (file.type.includes("word")) iconClass = "fa-file-word text-primary";
					else if (file.type.includes("pdf")) iconClass = "fa-file-pdf text-danger";
					else if (file.type.includes("presentation") || file.name.endsWith(".ppt") || file.name.endsWith(".pptx")) iconClass = "fa-file-powerpoint text-warning";
					else if (file.type.includes("sheet") || file.name.endsWith(".xls") || file.name.endsWith(".xlsx")) iconClass = "fa-file-excel text-success";

					fileItem.innerHTML = `
            <div class="file-info d-flex align-items-center gap-2">
                <i class="fa-solid ${iconClass} fa-2x"></i>
                <div>
                    <h6 class="mb-0">${file.name}</h6>
                    <small class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</small>
                </div>
            </div>
            <div class="file-progress mt-1">
                <div class="progress">
                    <div class="progress-bar bg-success" role="progressbar" style="width: 0%">0%</div>
                </div>
            </div>
            <button class="remove-btn btn btn-sm btn-outline-danger mt-1"><i class="fa-solid fa-xmark"></i></button>
        `;
					fileList.appendChild(fileItem);

					const progressBar = fileItem.querySelector(".progress-bar");

					// Remove file
					fileItem.querySelector(".remove-btn").addEventListener("click", async () => {
						const serverFileId = fileItem.dataset.fileId;

						if (!serverFileId) {
							// File hasn't been uploaded yet
							totalBytes -= file.size;
							updateTotalProgress();
							fileItem.remove();
							return;
						}

						if (!confirm("Are you sure you want to delete this file?")) return;

						try {
							const res = await fetch(`/files/${serverFileId}`, { method: "DELETE" });
							const data = await res.json();

							if (data.success) {
								// Remove file from UI and adjust totals
								totalBytes -= file.size;
								uploadedBytes -= file.size;
								updateTotalProgress();
								fileItem.remove();
							} else {
								alert("Failed to delete file: " + data.message);
							}
						} catch (err) {
							console.error(err);
							alert("Error deleting file from server.");
						}
					});

					// Upload immediately
					const formData = new FormData();
					formData.append("file", file);

					const xhr = new XMLHttpRequest();
					xhr.open("POST", `/api/files/upload/${folderId}`, true);

					xhr.upload.onprogress = (e) => {
						if (e.lengthComputable) {
							const percent = Math.round((e.loaded / e.total) * 100);
							progressBar.style.width = percent + "%";
							progressBar.textContent = percent + "%";

							updateTotalProgress(uploadedBytes + e.loaded);
						}
					};

					xhr.onload = () => {
						if (xhr.status === 201) {
							const response = JSON.parse(xhr.responseText);
							progressBar.classList.add("bg-success");
							progressBar.textContent = "Uploaded";

							if (response.fileId) fileItem.dataset.fileId = response.fileId;

							uploadedBytes += file.size;
							updateTotalProgress();
						} else {
							progressBar.classList.add("bg-danger");
							progressBar.textContent = "Failed";
						}
					};

					xhr.onerror = () => {
						progressBar.classList.add("bg-danger");
						progressBar.textContent = "Error";
						uploadedBytes += file.size;
						updateTotalProgress();
					};

					xhr.send(formData);
				});
			}

			// ---------------- TOTAL PROGRESS ----------------
			function updateTotalProgress(currentUploaded = uploadedBytes) {
				const percent = totalBytes > 0 ? Math.round((currentUploaded / totalBytes) * 100) : 0;
				totalProgressBar.style.width = percent + "%";
				totalProgressBar.textContent = percent + "%";
			}

			// ---------------- INITIAL LOAD ----------------
			document.addEventListener("DOMContentLoaded", () => {
				updateStorageInfo();
				if (window.selectedProjectId) loadFolders();
				else showNoProject(true);
			});

			document.addEventListener("projectChanged", () => {
				if (window.selectedProjectId) loadFolders();
			});
		</script>