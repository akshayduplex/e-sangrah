<%- include('../../partials/header') %>

	<!-- Page Wrapper -->
	<div class="page-wrapper">
		<div class="content">
			<!-- Breadcrumb -->
			<div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
				<div class="my-auto mb-2">
					<h2 class="mb-1">Upload Folder</h2>
					<nav>
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item">
								<a href="#"><i class="ti ti-smart-home"></i></a>
							</li>
							<li class="breadcrumb-item">
								Dashboard
							</li>
							<li class="breadcrumb-item">
								Upload Folder
							</li>
						</ol>
					</nav>
				</div>
			</div>
			<div class="filter-container mb-3">
				<div class="row g-3"> <!-- Use Bootstrap row with gap -->
					<div class="col-md-4"> <!-- 3 columns per row (12/4 = 3) -->
						<select id="projectName" class="form-select select2">
							<option value="">-- Select Project --</option>
						</select>
					</div>
					<div class="col-md-4">
						<select id="department" class="form-select select2">
							<option value="">-- Select Department --</option>
						</select>
					</div>
				</div>
			</div>

			<!-- Upload Box -->
			<div class="my-4">
				<div class="col-md-12">
					<div class="upload-box mb-3" id="uploadBox">
						<i class="ti ti-cloud-upload fa-2x text-primary mb-2"></i>
						<p class="mb-1"><strong>Click to upload folder</strong> or drag and drop file here</p>
						<small class="text-muted">*0 files and 0 folders (11.4 kB) in this location. 208.9 kB of 10.0 GB
							total storage used.Export report</br> toÂ XLSXÂ /Â ODSÂ /Â CSVÂ /Â PDF</small>
						<!-- File upload only -->
						<input type="file" class="form-control d-none" id="fileInput" multiple>

						<!-- Folder upload -->
						<input type="file" class="form-control d-none" id="folderInput" name="folder" webkitdirectory
							directory multiple>

					</div>
					<div id="fileList" class="row g-2"></div>
				</div>
				<div id="breadcrumb" class="mb-2"></div>

				<!-- Folder Display -->
				<div class="mb-3 p-2 bg-light rounded" id="folderPathContainer">
					<div id="folder-no-project" class="text-center py-2 d-none">
						<h6 class="text-muted mb-0">Please select a project first</h6>
					</div>
					<div id="folder-container" class="row g-2"></div>
					<div id="folder-loading" class="text-center py-3 d-none">
						<div class="spinner-border spinner-border-sm text-primary"></div>
						<p class="mt-1 text-muted small">Loading folders...</p>
					</div>
					<div id="folder-empty" class="text-center py-3 d-none">
						<i class="ti ti-folder-off fs-3 text-muted"></i>
						<p class="mt-1 text-muted small">No subfolders found</p>
					</div>
				</div>
				<div class="col-md-12 ">
					<div class="my-4">
						<button id="uploadFilesBtn" class="btn btn-primary rounded-pill">Upload Folders</button>
					</div>
				</div>
			</div>
		</div>
		<div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
			<p class="mb-0">2025 &copy; HLFPPT.</p>
			<p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
					Technology</a></p>
		</div>
	</div>
	<!-- /Page Wrapper -->

	<%- include('../../partials/footer') %>

		<!-- Upload Choice Modal -->
		<div class="modal fade" id="uploadChoiceModal" tabindex="-1" aria-labelledby="uploadChoiceModalLabel"
			aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="uploadChoiceModalLabel">Upload Type</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body text-center">
						<p>Select what you want to upload:</p>
						<div class="d-flex justify-content-around mt-3">
							<button type="button" class="btn btn-primary" id="uploadFilesModalBtn">Files</button>
							<button type="button" class="btn btn-success" id="uploadFolderModalBtn">Folder</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			// ---------------- GLOBAL STATE ----------------
			const folderState = { selectedFolders: [], currentFolderId: null };
			let pendingUploads = []; // store before upload
			const storageInfoEl = document.getElementById("storageInfo");
			const folderInput = document.getElementById("folderInput");
			const fileInput = document.getElementById("fileInput");
			let uploadChoiceModal = null;

			// Initialize modal only when needed
			function getUploadChoiceModal() {
				if (!uploadChoiceModal) {
					const modalElement = document.getElementById('uploadChoiceModal');
					if (modalElement) {
						uploadChoiceModal = new bootstrap.Modal(modalElement);
					}
				}
				return uploadChoiceModal;
			}

			const fileIcons = {
				ppt: "/img/icons/fn1.png",
				pptx: "/img/icons/fn1.png",
				doc: "/img/icons/fn2.png",
				docx: "/img/icons/fn2.png",
				xls: "/img/icons/fn3.png",
				xlsx: "/img/icons/fn3.png",
				pdf: "/img/icons/fn4.png",
				default: "/img/icons/fn1.png"
			};

			function getFileIcon(fileName) {
				const ext = fileName.split('.').pop().toLowerCase();
				return fileIcons[ext] || fileIcons.default;
			}

			const elements = {
				container: document.getElementById('folder-container'),
				loading: document.getElementById('folder-loading'),
				empty: document.getElementById('folder-empty'),
				noProject: document.getElementById('folder-no-project')
			};

			// -------------------------
			// Initialize Select2 with Clear Option
			// -------------------------
			function initSelect2(selector, url, textKey, placeholder) {
				$(selector).select2({
					placeholder: placeholder || `-- Select ${textKey} --`,
					allowClear: true,
					width: '100%',
					ajax: {
						url: url,
						dataType: 'json',
						delay: 250,
						data: function (params) {
							return {
								search: params.term
							};
						},
						processResults: function (data) {
							const results = [
								{ id: '', text: `-- Select ${textKey} --` },
								...data.data.map(item => ({
									id: item._id,
									text: item[textKey]
								}))
							];
							return {
								results: results
							};
						},
						cache: true
					}
				});

				// ðŸ”¥ FIX: Clear selection properly
				$(selector).on('select2:select', function (e) {
					if (!e.params.data.id) {
						$(this).val(null).trigger('change');
					}
				});

				// ðŸ”¥ FIX: Handle clearing
				$(selector).on('select2:unselect', function (e) {
					$(this).val(null).trigger('change');
				});
			}


			// initSelect2('#department', `${baseUrl}/api/departments/search`, 'name');
			// initSelect2('#projectName', `${baseUrl}/api/projects`, 'projectName');


			// ---------------- STORAGE INFO ----------------
			async function updateStorageInfo() {
				try {
					const res = await fetch(`/api/storage/usage`, { credentials: 'include' });
					if (res.ok) {
						const data = await res.json();
						if (data.success) {
							storageInfoEl.textContent = `Used: ${data.usedGB} GB / Total: ${data.maxGB} GB / Remaining: ${data.remainingGB} GB`;
						}
					}
				} catch (err) {
					console.error("Failed to load storage info:", err);
					storageInfoEl.textContent = "Failed to load storage info";
				}
			}

			// ---------------- FOLDER STATES ----------------
			const setLoadingState = (loading) => {
				if (elements.loading) elements.loading.classList.toggle('d-none', !loading);
				if (elements.container) elements.container.classList.toggle('d-none', loading);
				if (elements.empty) elements.empty.classList.add('d-none');
			};

			const setEmptyState = (empty) => {
				if (elements.empty) elements.empty.classList.toggle('d-none', !empty);
				if (elements.container) elements.container.classList.toggle('d-none', empty);
				if (elements.loading) elements.loading.classList.add('d-none');
			};

			const showNoProject = (show) => {
				if (elements.noProject) elements.noProject.classList.toggle('d-none', !show);
			};

			// ---------------- FETCH FOLDERS ----------------
			const fetchFolders = async (projectId) => {
				if (!projectId) return [];
				const departmentId = $('#department').val() || 'all';
				try {
					const res = await fetch(`/api/folders/tree/structure?projectId=${projectId}&departmentId=${departmentId}`, { credentials: 'include' });
					if (res.ok) {
						const data = await res.json();
						return data.success ? data.tree || [] : [];
					}
					return [];
				} catch (err) {
					console.error("Error fetching folders:", err);
					return [];
				}
			};

			const getSubfolders = (folders, id) => {
				if (!id) return folders || [];
				if (!folders || !Array.isArray(folders)) return [];

				const find = (list) => {
					for (const f of list) {
						if (f._id === id) return f.children || [];
						if (f.children && f.children.length) {
							const res = find(f.children);
							if (res) return res;
						}
					}
					return [];
				};
				return find(folders);
			};
			function renderFolderCard(item, type = 'folder') {
				const div = document.createElement('div');
				div.className = "col-6 col-md-4 col-lg-3 mb-3";

				if (type === 'folder') {
					div.dataset.id = item._id;
					div.innerHTML = `
            <div class="folder-card p-3 bg-white rounded shadow-sm hover-shadow cursor-pointer d-flex flex-column justify-content-between">
                <div class="d-flex align-items-center mb-2">
                    <img src="/img/icons/folder.png" style="width:40px; height:40px;" />
                    <h6 class="mb-0 ms-2 text-truncate" title="${item.name}">${item.name}</h6>
                </div>
                <div class="folder-footer text-muted small">
                    ${item.files?.length || 0} files
                </div>
            </div>
        `;
					div.querySelector('.folder-card').addEventListener('dblclick', () => {
						loadFolders(item._id, [...folderState.selectedFolders, { id: item._id, name: item.name }], window.selectedProjectId);
					});
				} else if (type === 'file') {
					div.innerHTML = `
            <div class="folder-card p-4 bg-white rounded shadow-sm hover-shadow cursor-pointer d-flex flex-column justify-content-between">
      <div class="d-flex align-items-center gap-2">
        <img src="${getFileIcon(item.originalName)}" alt="icon" style="width:24px;height:24px">
                    <span class="text-truncate" style="max-width:120px" title="${item.originalName}">${item.originalName}</span>
      </div>
      <span class="text-muted small pt-2">${(item.size / 1024).toFixed(1)} KB</span>
    </div>
        `;
				}
				return div;
			}



			const loadFolders = async (parentId = null, parentPath = [], projectId = null) => {
				projectId = projectId || window.selectedProjectId;
				if (!projectId) return showNoProject(true);

				showNoProject(false);
				setLoadingState(true);

				try {
					const allFolders = await fetchFolders(projectId);
					setLoadingState(false);

					const subfolders = getSubfolders(allFolders, parentId);
					const currentFolder = parentId ? findFolderById(allFolders, parentId) : null;
					const files = currentFolder?.files || [];

					if (!subfolders.length && !files.length) {
						setEmptyState(true);
						return;
					}
					setEmptyState(false);

					if (elements.container) {
						elements.container.innerHTML = '';

						// Render folders first
						subfolders.forEach(f => elements.container.appendChild(renderFolderCard(f, 'folder')));
						// Render files after folders
						files.forEach(f => elements.container.appendChild(renderFolderCard(f, 'file')));
					}

					folderState.selectedFolders = parentPath;
					renderBreadcrumb(parentPath);

				} catch (err) {
					console.error("Error loading folders:", err);
					setLoadingState(false);
				}
			};

			// Helper to find folder anywhere in tree
			function findFolderById(folders, id) {
				for (const f of folders) {
					if (f._id === id) return f;
					if (f.children?.length) {
						const res = findFolderById(f.children, id);
						if (res) return res;
					}
				}
				return null;
			}

			function renderBreadcrumb(parentPath) {
				const breadcrumbEl = document.getElementById("breadcrumb");
				if (!breadcrumbEl) return;

				breadcrumbEl.innerHTML = '';

				const root = document.createElement('span');
				root.innerHTML = `<a href="javascript:void(0);" data-id="">Root</a>`;
				breadcrumbEl.appendChild(root);

				parentPath.forEach(item => {
					const separator = document.createElement('span');
					separator.textContent = ' / ';
					breadcrumbEl.appendChild(separator);

					const link = document.createElement('a');
					link.href = "javascript:void(0);";
					link.dataset.id = item.id;
					link.textContent = item.name;
					breadcrumbEl.appendChild(link);
				});

				if (folderState.currentFolderId) {
					const selectedItem = breadcrumbEl.querySelector(`a[data-id="${folderState.currentFolderId}"]`);
					if (selectedItem) selectedItem.style.fontWeight = 'bold';
				}

				breadcrumbEl.querySelectorAll('a').forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						const id = e.target.dataset.id;
						const idx = parentPath.findIndex(p => p.id === id);
						const newParentPath = parentPath.slice(0, idx + 1);
						folderState.currentFolderId = id || null;
						loadFolders(id || null, newParentPath, window.selectedProjectId);
					});
				});
			}

			const updateUploadState = () => {
				const uploadBox = document.getElementById("uploadBox");
				if (uploadBox) uploadBox.classList.toggle('disabled', !folderState.currentFolderId);
			};

			// ---------------- UPLOAD BOX ----------------
			function initializeUploadBox() {
				const uploadBox = document.getElementById("uploadBox");

				if (!uploadBox) return;

				const uploadFilesModalBtn = document.getElementById("uploadFilesModalBtn");
				const uploadFolderModalBtn = document.getElementById("uploadFolderModalBtn");

				if (uploadFilesModalBtn) uploadFilesModalBtn.addEventListener("click", () => { getUploadChoiceModal().hide(); fileInput.click(); });
				if (uploadFolderModalBtn) uploadFolderModalBtn.addEventListener("click", () => { getUploadChoiceModal().hide(); folderInput.click(); });

				uploadBox.addEventListener("click", () => {
					if (!folderState.currentFolderId) return alert("Please select a folder first.");
					getUploadChoiceModal().show();
				});

				uploadBox.addEventListener("dragover", (e) => { e.preventDefault(); if (!folderState.currentFolderId) return; uploadBox.classList.add("dragover"); });
				uploadBox.addEventListener("dragleave", () => uploadBox.classList.remove("dragover"));
				uploadBox.addEventListener("drop", (e) => { e.preventDefault(); uploadBox.classList.remove("dragover"); if (e.dataTransfer && e.dataTransfer.files) handleFiles(e.dataTransfer.files); });

				folderInput.addEventListener("change", () => { if (folderInput.files) handleFolderFiles(folderInput.files); folderInput.value = ""; });
				fileInput.addEventListener("change", () => { if (fileInput.files) handleFiles(fileInput.files); fileInput.value = ""; });
			}

			function renderPendingFile(item) {
				const fileList = document.getElementById("fileList");
				if (!fileList) return null;

				const div = document.createElement('div');
				div.className = 'col-6 mb-3 pending-item';

				const isFolder = !!item.relativePath;
				const displayName = isFolder ? item.relativePath : item.file.name;
				const sizeMB = ((item.file.size || 0) / 1024 / 1024).toFixed(2);

				div.innerHTML = `
<div class="d-flex align-items-center border rounded p-2 bg-white gap-3">

    <!-- ICON -->
    <div style="width: 35px; flex-shrink:0;">
        <img src="${isFolder ? '/img/icons/folder.png' : getFileIcon(displayName)}" style="width:32px; height:32px;">
    </div>

    <!-- CONTENT -->
    <div class="flex-grow-1 d-flex flex-column">
        <div class="d-flex justify-content-between align-items-center">
            <!-- FILE NAME -->
            <div class="text-truncate" style="font-size: 13px; font-weight: 500; max-width: 160px;" title="${displayName}">
                ${displayName}
            </div>
             <button class="btn btn-sm btn-link text-danger p-0 remove-btn" title="Remove">
                <i class="fa-solid fa-xmark"></i>
            </button>
        </div>

        <!-- PROGRESS + REMOVE -->
        <div class="d-flex align-items-center mt-1" style="gap: 10px;">
			<small class="text-muted ms-2">${sizeMB} MB</small>
            <div class="progress flex-grow-1" style="height: 6px;">
                <div class="progress-bar bg-success" role="progressbar" style="width: 0%">0%</div>
            </div>
        </div>
    </div>

</div>
`;

				// Remove functionality
				div.querySelector('.remove-btn').addEventListener('click', () => {
					fileList.removeChild(div);
					const index = pendingUploads.indexOf(item);
					if (index > -1) pendingUploads.splice(index, 1);
				});

				fileList.appendChild(div);
				return div;
			}


			function handleFiles(files) {
				if (!folderState.currentFolderId) return alert("Please select a folder first.");
				Array.from(files).forEach(file => { pendingUploads.push({ file, folderId: folderState.currentFolderId }); renderPendingFile({ file, folderId: folderState.currentFolderId }); });
			}

			function handleFolderFiles(files) {
				if (!folderState.currentFolderId) return alert("Please select a folder first.");
				Array.from(files).forEach(file => {
					// Preserve folder structure
					console.log("folder strucutre", folderState.currentFolderId, file.webkitRelativePath)
					const item = { file, folderId: folderState.currentFolderId, relativePath: file.webkitRelativePath };
					pendingUploads.push(item);
					renderPendingFile(item);
				});
			}

			// ---------------- FILE UPLOAD TO SERVER ----------------
			async function uploadFileToServer(fileItem, progressCallback) {
				return new Promise((resolve) => {
					const formData = new FormData();
					formData.append("file", fileItem.file);

					const xhr = new XMLHttpRequest();
					xhr.open("POST", `/api/files/upload/${fileItem.folderId}`, true);
					xhr.withCredentials = true;

					// âœ… Real-time progress event
					xhr.upload.onprogress = function (event) {
						if (event.lengthComputable) {
							let percent = Math.round((event.loaded / event.total) * 100);
							progressCallback(percent);
						}
					};

					xhr.onload = function () {
						if (xhr.status === 200) {
							progressCallback(100);
							resolve(true);
						} else {
							progressCallback(0, true);
							resolve(false);
						}
					};

					xhr.onerror = function () {
						progressCallback(0, true);
						resolve(false);
					};

					xhr.send(formData);
				});
			}

			// ---------------- FOLDER UPLOAD ----------------
			async function uploadFolderToServer(folderItems) {
				for (const item of folderItems) {
					const div = Array.from(document.querySelectorAll('.pending-item')).find(d =>
						d.querySelector('.text-truncate').textContent === item.relativePath
					);
					const progressBar = div?.querySelector('.progress-bar');

					await new Promise((resolve) => {
						const formData = new FormData();

						// âœ… Append the file itself
						formData.append("file", item.file, item.relativePath);

						// âœ… Extract top-level folder from relativePath
						const topLevelFolder = item.relativePath.split('/')[0];
						console.log("Top level folder:", topLevelFolder);
						// âœ… Append folderName and relativePath
						formData.append("folderName", topLevelFolder);
						const xhr = new XMLHttpRequest();
						xhr.open("POST", `/api/files/upload-folder/${item.folderId}`, true);
						xhr.withCredentials = true;

						xhr.upload.onprogress = function (event) {
							if (event.lengthComputable && progressBar) {
								const percent = Math.round((event.loaded / event.total) * 100);
								progressBar.style.width = percent + '%';
								progressBar.textContent = percent + '%';
							}
						};

						xhr.onload = function () {
							if (progressBar) {
								progressBar.style.width = '100%';
								progressBar.textContent = xhr.status === 200 ? 'Uploaded' : 'Failed';
								progressBar.classList.toggle('bg-success', xhr.status === 200);
								progressBar.classList.toggle('bg-danger', xhr.status !== 200);
							}
							resolve(xhr.status === 200);
						};

						xhr.onerror = function () {
							if (progressBar) {
								progressBar.style.width = '100%';
								progressBar.textContent = 'Failed';
								progressBar.classList.remove('bg-success');
								progressBar.classList.add('bg-danger');
							}
							resolve(false);
						};

						xhr.send(formData);
					});
				}
			}


			async function uploadPendingFiles() {
				if (!pendingUploads.length) return alert("No files to upload.");
				if (!folderState.currentFolderId) return alert("Please select a folder first.");

				// Separate folder vs single files
				const folderFiles = pendingUploads.filter(f => f.relativePath);
				const singleFiles = pendingUploads.filter(f => !f.relativePath);

				// Upload single files
				for (const item of singleFiles) {
					const div = Array.from(document.querySelectorAll('.pending-item'))
						.find(d => d.querySelector('.text-truncate').textContent === (item.relativePath || item.file.name));

					let progressBar = div ? div.querySelector('.progress-bar') : null;
					const updateProgress = (p, failed = false) => { if (progressBar) { progressBar.style.width = p + '%'; progressBar.textContent = failed ? 'Failed' : p + '%'; progressBar.classList.toggle('bg-success', !failed); progressBar.classList.toggle('bg-danger', failed); } };
					const success = await uploadFileToServer(item, updateProgress);
					updateProgress(100, !success);
					item.uploadSuccess = success;
				}

				// Upload folder files in one call
				if (folderFiles.length) {
					const updateEachProgress = (item, percent, failed = false) => {
						const div = Array.from(document.querySelectorAll('.pending-item')).find(d =>
							d.querySelector('.text-truncate').textContent === item.relativePath
						);
						if (div) {
							const progressBar = div.querySelector('.progress-bar');
							progressBar.style.width = percent + '%';
							progressBar.textContent = failed ? 'Failed' : percent + '%';
							progressBar.classList.toggle('bg-success', !failed);
							progressBar.classList.toggle('bg-danger', failed);
						}
					};

					await uploadFolderToServer(folderFiles, updateEachProgress);
				}


				// Refresh folder view
				if (window.selectedProjectId) loadFolders(folderState.currentFolderId, folderState.selectedFolders, window.selectedProjectId);
			}

			// ---------------- INITIAL LOAD ----------------
			document.addEventListener("DOMContentLoaded", function () {
				updateStorageInfo();
				initializeUploadBox();
				// Initialize Select2 with proper configuration
				initSelect2('#department', `${baseUrl}/api/departments/search`, 'name', '-- Select Department --');
				initSelect2('#projectName', `${baseUrl}/api/projects`, 'projectName', '-- Select Project --');

				$('#projectName').on('select2:select', function (e) {
					const selectedId = e.params.data.id;
					if (selectedId) {
						window.selectedProjectId = selectedId;
						loadFolders(null, [], selectedId);
					}
				});

				$('#department').on('change', function () {
					if (window.selectedProjectId) {
						loadFolders(null, [], window.selectedProjectId);
					}
				});
				const uploadFilesBtn = document.getElementById("uploadFilesBtn");
				if (uploadFilesBtn) uploadFilesBtn.addEventListener("click", uploadPendingFiles);

				setTimeout(() => {
					if (!window.selectedProjectId) {
						const firstOption = $('#projectName').find('option:eq(1)').val();
						if (firstOption) {
							$('#projectName').val(firstOption).trigger('change');
							window.selectedProjectId = firstOption;
							loadFolders(null, [], firstOption);
						}
					}
					if (!$('#department').val()) {
						const firstDept = $('#department').find('option:eq(1)').val();
						if (firstDept) {
							$('#department').val(firstDept).trigger('change');
						}
					}
				}, 600);
			});
		</script>