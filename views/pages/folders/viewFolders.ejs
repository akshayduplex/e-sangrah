<%- include('../../partials/header') %>

    <style>
        #file-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .filebox {
            flex: 0 0 calc(20% - 15px);
            text-align: center;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fff;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }

        .filebox:hover {
            box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
        }

        .filebox img {
            width: 50px;
            height: 50px;
            margin-bottom: 10px;
        }

        .filebox p {
            font-size: 14px;
            word-break: break-all;
        }

        @media (max-width:1200px) {
            .filebox {
                flex: 0 0 calc(25%-15px);
            }
        }

        @media (max-width:992px) {
            .filebox {
                flex: 0 0 calc(33.33%-15px);
            }
        }

        @media (max-width:768px) {
            .filebox {
                flex: 0 0 calc(50%-15px);
            }
        }

        @media (max-width:576px) {
            .filebox {
                flex: 0 0 100%;
            }
        }
    </style>

    <div class="page-wrapper">
        <div class="content">

            <div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
                <div class="my-auto mb-2">
                    <h2 class="mb-1" id="folder-name">
                        <%= folder.name %>
                    </h2>
                    <nav>
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><a href="#"><i class="ti ti-smart-home"></i></a></li>
                            <li class="breadcrumb-item">Dashboard</li>
                            <li class="breadcrumb-item active">Files</li>
                        </ol>
                    </nav>
                </div>
            </div>

            <!-- Request Access -->
            <div id="request-access-container" class="text-center my-3"
                style="display:<%= canRequestAccess ? 'block' : 'none' %>;">
                <button id="request-access-btn" class="btn btn-primary">Request Access</button>
                <p id="request-access-msg" class="mt-2 text-success" style="display:none;"></p>
            </div>

            <!-- Files -->
            <div id="file-container" style="display:<%= canView && !folderExpired ? 'flex' : 'none' %>;"></div>

            <!-- Expired / Empty -->
            <div id="file-empty" class="text-center py-4" style="display:<%= folderExpired ? 'block' : 'none' %>;">
                <i class="ti ti-file-off fs-1 text-muted"></i>
                <p class="mt-2 text-muted">This folder has expired and files are no longer available.</p>
            </div>

            <div id="file-loading" class="text-center py-4" style="display:none;">
                <div class="spinner-border text-primary"></div>
                <p class="mt-2 text-muted">Loading files...</p>
            </div>

        </div>

        <div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
            <p class="mb-0">2025 &copy; HLFPPT.</p>
            <p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex Services &
                    Technology</a></p>
        </div>
    </div>

    <%- include('../../partials/footer') %>

        <script>
            const fileContainer = document.getElementById('file-container');
            const fileLoading = document.getElementById('file-loading');
            const fileEmpty = document.getElementById('file-empty');
            const folderName = document.getElementById('folder-name');
            const requestAccessContainer = document.getElementById('request-access-container');
            const requestAccessBtn = document.getElementById('request-access-btn');
            const requestAccessMsg = document.getElementById('request-access-msg');

            const CAN_REQUEST_ACCESS = <%= canRequestAccess ? 'true' : 'false' %>;
            const FOLDER_EXPIRED = <%= folderExpired ? 'true' : 'false' %>;
            const CAN_VIEW = <%= canView ? 'true' : 'false' %>;

            const fileIcons = {
                ppt: "/img/icons/fn1.png",
                pptx: "/img/icons/fn1.png",
                doc: "/img/icons/fn2.png",
                docx: "/img/icons/fn2.png",
                xls: "/img/icons/fn3.png",
                xlsx: "/img/icons/fn3.png",
                pdf: "/img/icons/fn4.png",
                default: "/img/icons/fn1.png"
            };

            const setLoading = (loading) => {
                fileLoading.style.display = loading ? 'block' : 'none';
                fileContainer.style.display = loading ? 'none' : 'flex';
                fileEmpty.style.display = 'none';
            };

            const setEmpty = (empty) => {
                fileEmpty.style.display = empty ? 'block' : 'none';
                fileContainer.style.display = empty ? 'none' : 'flex';
                fileLoading.style.display = 'none';
            };

            const getFileExtension = (filename) => {
                const parts = filename.split('.');
                return parts.length > 1 ? parts.pop().toLowerCase() : '';
            };

            const formatFileSize = (bytes) => {
                if (bytes < 1024) return bytes + " B";
                if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + " KB";
                return (bytes / (1024 * 1024)).toFixed(1) + " MB";
            };

            const loadFiles = async () => {
                if (!CAN_VIEW || FOLDER_EXPIRED) return;

                try {
                    const parts = window.location.pathname.split("/");
                    const folderId = parts[parts.indexOf("folders") + 2];

                    setLoading(true);

                    const res = await fetch(`/api/folders/details/${folderId}`);
                    const data = await res.json();

                    if (!data.success || !data.folder) throw new Error("Folder not found");

                    const files = data.folder.files || [];
                    folderName.textContent = data.folder.name;
                    fileContainer.innerHTML = "";

                    setLoading(false);

                    if (files.length === 0) { setEmpty(true); return; }

                    files.forEach(file => {
                        const ext = getFileExtension(file.originalName);
                        const icon = fileIcons[ext] || fileIcons.default;
                        const fileSize = formatFileSize(file.size);

                        const div = document.createElement("div");
                        div.className = "filebox mb-2";
                        div.innerHTML = `
                    <div class="d-flex align-items-center p-2 rounded cursor-pointer">
                        <span class="avatar rounded bg-light me-2">
                            <img src="${icon}" style="height:30px;">
                        </span>
                        <div>
                            <p class="mb-0 text-dark">${file.originalName}</p>
                            <small class="text-muted">${fileSize}</small>
                        </div>
                    </div>
                `;
                        div.addEventListener("click", () => {
                            if (file.file) window.open('/uploads/' + file.file, '_blank');
                            else alert("File URL not found");
                        });

                        fileContainer.appendChild(div);
                    });

                } catch (err) {
                    console.error(err);
                    setLoading(false);
                    setEmpty(true);
                }
            };

            requestAccessBtn?.addEventListener("click", async () => {
                const parts = window.location.pathname.split("/");
                const folderId = parts[parts.indexOf("folders") + 2];

                requestAccessBtn.disabled = true;
                requestAccessBtn.textContent = "Sending...";

                try {
                    const res = await fetch(`/api/folders/${folderId}/request-access`, { method: 'POST' });
                    const data = await res.json();

                    requestAccessMsg.style.display = 'block';
                    requestAccessMsg.textContent = data.success ?
                        "Access request sent to folder owner!" :
                        data.message || "Error sending request.";

                    if (data.success) requestAccessContainer.style.display = 'none';
                } catch (err) {
                    console.error(err);
                    requestAccessMsg.style.display = 'block';
                    requestAccessMsg.textContent = "Server error. Please try again.";
                } finally {
                    requestAccessBtn.disabled = false;
                    requestAccessBtn.textContent = "Request Access";
                }
            });

            document.addEventListener("DOMContentLoaded", loadFiles);
        </script>