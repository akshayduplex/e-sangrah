<%- include('../../partials/header') %>

    <style>
        /* Container adjustments */
        #file-container {
            margin-left: -7.5px;
            margin-right: -7.5px;
            display: flex;
            flex-wrap: wrap;
        }

        /* Grid item: 10 per row on large screens */
        .file-grid-item {
            padding: 7.5px;
            flex: 0 0 100%;
            max-width: 100%;
        }

        @media (min-width: 1200px) {
            .file-grid-item {
                flex: 0 0 10%;
                max-width: 10%;
            }
        }

        @media (min-width: 992px) and (max-width: 1199px) {
            .file-grid-item {
                flex: 0 0 12.5%;
                max-width: 12.5%;
            }
        }

        @media (min-width: 768px) and (max-width: 991px) {
            .file-grid-item {
                flex: 0 0 16.66%;
                max-width: 16.66%;
            }
        }

        @media (min-width: 576px) and (max-width: 767px) {
            .file-grid-item {
                flex: 0 0 25%;
                max-width: 25%;
            }
        }

        /* Modern card styling */
        .file-card {
            border: 1px solid #e9ecef;
            border-radius: 0.5rem;
            padding: 15px 10px;
            text-align: center;
            height: 100%;
            background-color: #fff;
            transition: all 0.2s ease-in-out;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            position: relative;
        }

        .file-card:hover {
            box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.15);
            transform: translateY(-3px);
            border-color: #ced4da;
        }

        /* Always show actions for first 3 cards */
        .file-card.always-show-actions .file-actions {
            opacity: 1 !important;
        }

        .file-icon-img {
            width: 48px;
            height: 48px;
            object-fit: contain;
            margin-bottom: 8px;
        }

        .file-name {
            font-size: 0.8rem;
            font-weight: 500;
            color: #343a40;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
            margin-bottom: 0;
        }

        .file-size {
            font-size: 0.7rem;
            color: #6c757d;
            margin-top: 2px;
        }

        .file-actions {
            position: absolute;
            top: 5px;
            right: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .file-card:hover .file-actions {
            opacity: 1;
        }

        .file-actions .btn {
            padding: 0;
            font-size: 1rem;
            color: #6c757d;
            background-color: transparent !important;
            border: none !important;
        }
    </style>

    <div class="page-wrapper">
        <div class="content">

            <div class="d-flex align-items-center justify-content-between page-breadcrumb mb-4">
                <div class="my-auto">
                    <h2 class="mb-1" id="folder-name">
                        <%= folder.name %>
                    </h2>
                    <nav>
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><a href="#"><i class="ti ti-smart-home"></i></a></li>
                            <li class="breadcrumb-item">Dashboard</li>
                            <li class="breadcrumb-item active">Files</li>
                        </ol>
                    </nav>
                </div>
            </div>

            <!-- Request Access -->
            <div id="request-access-container" class="text-center my-4 p-4 rounded bg-light"
                style="display:<%= canRequestAccess ? 'block' : 'none' %>;">
                <button id="request-access-btn" class="btn btn-primary">Request Access</button>
                <p id="request-access-msg" class="mt-2 text-success" style="display:none;"></p>
            </div>

            <!-- File Container -->
            <div id="file-container" class="row gx-3"
                style="display:<%= canView && !folderExpired ? 'flex' : 'none' %>;">
            </div>

            <!-- Empty State -->
            <div id="file-empty" class="text-center py-5" style="display:<%= folderExpired ? 'block' : 'none' %>;">
                <i class="ti ti-file-off fs-1 text-muted"></i>
                <p class="mt-2 text-muted">This folder has expired and files are no longer available.</p>
            </div>

            <!-- Loading State -->
            <div id="file-loading" class="text-center py-5" style="display:none;">
                <div class="spinner-border text-primary"></div>
                <p class="mt-2 text-muted">Loading files...</p>
            </div>

        </div>

        <div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
            <p class="mb-0">2025 &copy; HLFPPT.</p>
            <p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex Services &
                    Technology</a></p>
        </div>
    </div>

    <%- include('../../partials/footer') %>

        <script>
            const fileContainer = document.getElementById('file-container');
            const fileLoading = document.getElementById('file-loading');
            const fileEmpty = document.getElementById('file-empty');
            const folderName = document.getElementById('folder-name');
            const requestAccessContainer = document.getElementById('request-access-container');
            const requestAccessBtn = document.getElementById('request-access-btn');
            const requestAccessMsg = document.getElementById('request-access-msg');

            const CAN_REQUEST_ACCESS = <%= canRequestAccess ? 'true' : 'false' %>;
            const FOLDER_EXPIRED = <%= folderExpired ? 'true' : 'false' %>;
            const CAN_VIEW = <%= canView ? 'true' : 'false' %>;

            const fileIcons = {
                ppt: "/img/icons/fn1.png",
                pptx: "/img/icons/fn1.png",
                doc: "/img/icons/fn2.png",
                docx: "/img/icons/fn2.png",
                xls: "/img/icons/fn3.png",
                xlsx: "/img/icons/fn3.png",
                pdf: "/img/icons/fn4.png",
                default: "/img/icons/fn1.png"
            };

            const setLoading = (loading) => {
                fileLoading.style.display = loading ? 'block' : 'none';
                fileContainer.style.display = loading ? 'none' : (CAN_VIEW && !FOLDER_EXPIRED ? 'flex' : 'none');
                fileEmpty.style.display = 'none';
            };

            const setEmpty = (empty) => {
                fileEmpty.style.display = empty ? 'block' : 'none';
                fileContainer.style.display = empty ? 'none' : (CAN_VIEW && !FOLDER_EXPIRED ? 'flex' : 'none');
                fileLoading.style.display = 'none';
            };

            const getFileExtension = (filename) => {
                const parts = filename.split('.');
                return parts.length > 1 ? parts.pop().toLowerCase() : '';
            };

            const formatFileSize = (bytes) => {
                if (bytes < 1024) return bytes + " B";
                if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + " KB";
                return (bytes / (1024 * 1024)).toFixed(1) + " MB";
            };

            const loadFiles = async () => {
                if (!CAN_VIEW || FOLDER_EXPIRED) return;

                try {
                    const parts = window.location.pathname.split("/");
                    const folderId = parts[parts.indexOf("folders") + 2];

                    setLoading(true);

                    const res = await fetch(`/api/folders/details/${folderId}`);
                    const data = await res.json();

                    if (!data.success || !data.folder) throw new Error("Folder not found");

                    const files = data.folder.files || [];
                    folderName.textContent = data.folder.name;
                    fileContainer.innerHTML = "";

                    setLoading(false);

                    if (files.length === 0) { setEmpty(true); return; }

                    files.forEach((file, index) => {
                        const ext = getFileExtension(file.originalName);
                        const icon = fileIcons[ext] || fileIcons.default;
                        const fileSize = formatFileSize(file.fileSize);

                        const colDiv = document.createElement("div");
                        colDiv.className = "file-grid-item mb-3";

                        colDiv.innerHTML = `
                    <div class="file-card ${index < 3 ? 'always-show-actions' : ''}" data-file-id="${file._id}" title="${file.originalName}">
                        <img src="${icon}" class="file-icon-img" alt="${ext} icon">
                        <p class="file-name mb-0">${file.originalName}</p>
                        <small class="file-size">${fileSize}</small>

                        <div class="file-actions dropdown">
                            <button class="btn btn-sm" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="ti ti-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item view-file" href="#" data-file-id="${file._id}">View</a></li>
                                <li><a class="dropdown-item download-file" href="#" data-file-id="${file._id}">Download</a></li>
                            </ul>
                        </div>
                    </div>
                `;

                        const handleFileAction = (e, action) => {
                            e.stopPropagation();
                            const fileId = e.currentTarget.getAttribute('data-file-id') || e.currentTarget.closest('.file-card').getAttribute('data-file-id');
                            if (fileId) {
                                if (action === 'view') window.location.href = `/folders/view/${fileId}`;
                                if (action === 'download') window.location.href = `/api/folders/download/${fileId}`;
                            } else {
                                alert("File not found");
                            }
                        };

                        colDiv.querySelector(".view-file").addEventListener("click", (e) => handleFileAction(e, 'view'));
                        colDiv.querySelector(".download-file").addEventListener("click", (e) => handleFileAction(e, 'download'));
                        colDiv.querySelector(".file-card").addEventListener("dblclick", (e) => handleFileAction(e, 'view'));

                        fileContainer.appendChild(colDiv);
                    });
                } catch (err) {
                    console.error(err);
                    setLoading(false);
                    setEmpty(true);
                }
            };

            // Request access
            requestAccessBtn?.addEventListener("click", async () => {
                const parts = window.location.pathname.split("/");
                const folderId = parts[parts.indexOf("folders") + 2];

                requestAccessBtn.disabled = true;
                requestAccessBtn.textContent = "Sending...";
                requestAccessMsg.style.display = 'block';
                requestAccessMsg.textContent = "Sending request...";

                try {
                    const res = await fetch(`/api/folders/${folderId}/request-access`, { method: 'POST' });
                    const data = await res.json();

                    requestAccessMsg.textContent = data.success
                        ? "Access request sent to folder owner!"
                        : data.message || "Error sending request.";

                    if (data.success) requestAccessBtn.style.display = 'none';

                } catch (err) {
                    console.error(err);
                    requestAccessMsg.textContent = "Server error. Please try again.";
                } finally {
                    if (requestAccessBtn.style.display !== 'none') {
                        requestAccessBtn.disabled = false;
                        requestAccessBtn.textContent = "Request Access";
                    }
                }
            });

            document.addEventListener("DOMContentLoaded", loadFiles);
        </script>