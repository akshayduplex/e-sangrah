<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DMS Admin – Sidebar</title>
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lexend:wght@100..900&display=swap" rel="stylesheet">
    <!-- Material Symbols (same icon family as in your Figma) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" type="text/css" href="/css/mystyle.css">

</head>

<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-sm-5">
                <div class="login_illstration">
                    <div class="loginlogo">
                        <img src="/img/logo.png">
                    </div>
                    <div class="main_illustration">
                        <img src="/img/forgetpass.png">
                    </div>
                </div>
            </div>
            <div class="col-sm-7">
                <div class="loginforms">
                    <div class="forgotsection mb-4">
                        <h2>Forgot Password?</h2>
                        <p class="subtext">Relax! You can recover your password here.</p>
                        <div class="mb-4">
                            <label for="emailInput" class="form-label">Enter your Email</label>
                            <input type="email" class="form-control" id="emailInput" name="email"
                                placeholder="name@example.com" value="<%= email || '' %>" required>
                        </div>
                        <div class="submitrow sendotprow">
                            <button type="button" class="btn btn-primary submit-btn">Send OTP</button>
                            <span>Didn’t get it?
                                <button type="button" class="btn btn-link resend-btn">Resend</button>
                            </span>
                        </div>
                    </div>

                    <div class="otp-section" style="display:none">
                        <h5 class="mb-3">Enter OTP</h5>
                        <div class="d-flex mb-3 otp-inputs">
                            <input type="text" maxlength="1" class="form-control otp-input">
                            <input type="text" maxlength="1" class="form-control otp-input">
                            <input type="text" maxlength="1" class="form-control otp-input">
                            <input type="text" maxlength="1" class="form-control otp-input">
                        </div>
                        <p class="text-success fw-bold" style="display:none">✔ OTP Verified</p>
                        <p id="otp-timer"></p>
                    </div>
                    <!-- New Password -->
                    <form id="resetPasswordForm" style="display:none">
                        <input type="hidden" id="hiddenEmail" name="email">
                        <div class="mb-3 password-box">
                            <label for="newPassword" class="form-label">New Password</label>
                            <input type="password" id="newPassword" class="form-control">
                            <span class="password-toggle" onclick="togglePassword('newPassword', this)">
                                <i class="fa fa-eye"></i>
                            </span>
                        </div>
                        <div class="mb-3 password-box">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" id="confirmPassword" class="form-control">
                            <span class="password-toggle" onclick="togglePassword('confirmPassword', this)">
                                <i class="fa fa-eye"></i>
                            </span>
                        </div>
                        <button type="submit" class="btn btn-login">Reset Password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div>



    <script defer src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>

        // Show/Hide Password
        function togglePassword(id, el) {
            const input = document.getElementById(id);
            const icon = el.querySelector("i");
            if (input.type === "password") {
                input.type = "text";
                icon.classList.replace("fa-eye", "fa-eye-slash");
            } else {
                input.type = "password";
                icon.classList.replace("fa-eye-slash", "fa-eye");
            }
        }

        /* ==========================
           Main DOM Logic
        ========================== */
        document.addEventListener("DOMContentLoaded", function () {
            const emailInput = document.getElementById("emailInput");
            const sendOtpBtn = document.querySelector(".submit-btn");
            const resendBtn = document.querySelector(".resend-btn");
            const otpSection = document.querySelector(".otp-section");
            const otpInputs = document.querySelectorAll(".otp-input");
            const otpVerifiedText = otpSection.querySelector(".text-success");
            const countdownDisplay = document.getElementById("otp-timer");
            const resetForm = document.getElementById("resetPasswordForm");

            let otpSent = false, countdownInterval;

            // Reset all fields
            function resetAllFields() {
                emailInput.value = "";
                otpInputs.forEach(i => i.value = "");
                otpSection.style.display = "none";
                otpVerifiedText.style.display = "none";
                resetForm.style.display = "none";
                sendOtpBtn.disabled = false;
                clearInterval(countdownInterval);
                otpSent = false;
            }

            resetAllFields();

            // Start OTP countdown
            function startCountdown(duration = 600) {
                let timer = duration;
                clearInterval(countdownInterval);
                countdownInterval = setInterval(() => {
                    let m = Math.floor(timer / 60);
                    let s = timer % 60;
                    countdownDisplay.textContent = `OTP expires in ${m}:${s < 10 ? "0" + s : s}`;
                    if (--timer < 0) {
                        clearInterval(countdownInterval);
                        countdownDisplay.textContent = "⏰ OTP expired. Please resend.";
                        otpInputs.forEach(i => i.disabled = true);
                    }
                }, 1000);
            }

            // Send OTP
            async function sendOtp() {
                const email = emailInput.value.trim();
                if (!email) { showToast("Enter email"); return; }
                sendOtpBtn.disabled = true;

                try {
                    const res = await fetch("/api/auth/send-otp", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: new URLSearchParams({ email })
                    });
                    const data = await res.json();

                    if (data.success) {
                        showToast("OTP sent to your email!");
                        otpSection.style.display = "block";
                        otpInputs.forEach(i => { i.disabled = false; i.value = ""; });
                        otpInputs[0].focus();
                        otpSent = true;
                        startCountdown(600);
                    } else {
                        showToast(data.message || "Failed to send OTP", "error");
                        sendOtpBtn.disabled = false;
                    }
                } catch (err) {
                    showToast("Something went wrong", "error");
                    sendOtpBtn.disabled = false;
                }
            }

            sendOtpBtn.addEventListener("click", sendOtp);

            // Resend OTP
            resendBtn.addEventListener("click", () => {
                otpInputs.forEach(i => i.value = "");
                otpVerifiedText.style.display = "none";
                resetForm.style.display = "none";
                otpSection.style.display = "block";
                otpSent = false;
                sendOtp();
            });

            // OTP auto-focus & verification trigger
            otpInputs.forEach((input, idx) => {
                input.addEventListener("input", () => {
                    if (input.value.length === 1 && idx < otpInputs.length - 1) {
                        otpInputs[idx + 1].focus();
                    }

                    if (otpSent && [...otpInputs].every(i => i.value.length === 1)) {
                        verifyOtp();
                    }
                });
            });

            // Verify OTP
            async function verifyOtp() {
                if (!otpSent) { showToast("Request OTP first"); return; }

                const email = emailInput.value.trim();
                const otp = [...otpInputs].map(i => i.value).join("");

                try {
                    const res = await fetch("/api/auth/verify-otp", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: new URLSearchParams({ email, otp })
                    });
                    const data = await res.json();

                    if (data.success) {
                        clearInterval(countdownInterval);
                        countdownDisplay.style.display = "none";
                        otpVerifiedText.style.display = "block";
                        resetForm.style.display = "block";
                        document.getElementById("hiddenEmail").value = email;
                    } else {
                        showToast("Invalid OTP", "error");
                        otpInputs.forEach(i => i.value = "");
                        otpInputs[0].focus();
                    }
                } catch (err) {
                    showToast("Error verifying OTP", "error");
                }
            }

            // Reset password form submission
            resetForm.addEventListener("submit", async (e) => {
                e.preventDefault();

                const email = document.getElementById("hiddenEmail").value;
                const password = document.getElementById("newPassword").value.trim();
                const confirmPassword = document.getElementById("confirmPassword").value.trim();

                if (!password || !confirmPassword) { showToast("Fill password fields"); return; }
                if (password !== confirmPassword) { showToast("Passwords do not match"); return; }

                try {
                    const res = await fetch("/api/auth/send-reset-link", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ email, password, confirmPassword })
                    });

                    const data = await res.json();

                    if (data.success) {
                        showToast("Verification link sent!");
                        resetAllFields();
                        setTimeout(() => { window.location.href = "/login?pending=check-email"; }, 3000);
                    } else {
                        showToast(data.message || "Failed", "error");
                    }
                } catch (err) {
                    showToast("Error", "error");
                }
            });
        });
    </script>


</body>

</html>