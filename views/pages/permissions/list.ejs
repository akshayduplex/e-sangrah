<%- include('../../partials/header') %>

    <div class="page-wrapper">
        <div class="content">
            <!-- Breadcrumb -->
            <div class="dflexbtwn page-breadcrumb mb-3" id="breadcrumbWrapper">
                <div class="my-auto mb-2">
                    <h2 class="mb-1" id="pageTitle">Menu List</h2>
                    <nav>
                        <ol class="breadcrumb mb-0" id="breadcrumbNav">
                            <li class="breadcrumb-item">
                                <a href="#"><i class="ti ti-smart-home"></i></a>
                            </li>
                            <li class="breadcrumb-item">Menu List</li>
                        </ol>
                    </nav>
                </div>
                <div class="listbtn" id="listBtnWrapper">
                    <a href="/menu/add" id="btnAddMenu" class="site-btnmd fs-14">Add Menu</a>
                </div>
            </div>
            <!-- /Breadcrumb -->

            <div class="card" id="menuListCard">
                <!-- <div class="card-header d-flex align-items-center justify-content-between flex-wrap row-gap-3"
                    id="menuListHeader">
                    <h5 id="menuListTitle">Pages List</h5>
                </div> -->
                <div class="card-body p-0" id="menuListBody">
                    <div class="custom-datatable-filter table-responsive" id="menuTableWrapper">
                        <table class="table datatable" id="menuTable">
                            <thead class="thead-light">
                                <tr>
                                    <th>Sr No.</th>
                                    <th>Type</th>
                                    <th>Name</th>
                                    <th>URL</th>
                                    <th>Priority</th>
                                    <th>Is Show</th>
                                    <th>Add Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="menuTableBody">
                            </tbody>
                        </table>

                    </div>
                </div>
            </div>

            <div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3"
                id="footerWrapper">
                <p class="mb-0">2025 &copy; HLFPPT.</p>
                <p>Designed & Developed by
                    <a href="javascript:void(0);" id="devLink" class="text-primary">Duplex services & Technology</a>
                </p>
            </div>
        </div>
    </div>

    <%- include('../../partials/footer') %>
        <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
        <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>

        <link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet">
        <script>
            // Delete confirmation
            function confirmDelete(menuId) {
                if (confirm('Are you sure you want to delete this menu?')) {
                    fetch(`/api/menu/${menuId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                showToast('Menu deleted successfully', "success");
                                location.reload();
                            } else {
                                showToast('Error deleting menu: ' + data.message, "error");
                            }
                        })
                        .catch(err => {
                            console.error('Error:', err);
                            showToast('Error deleting menu', "error");
                        });
                }
            }

            let menuTable;

            // Debounce helper
            function debounce(fn, delay) {
                let timer;
                return function (...args) {
                    clearTimeout(timer);
                    timer = setTimeout(() => fn.apply(this, args), delay);
                };
            }

            $(document).ready(function () {
                let allMenuData = []; // Store all data for client-side operations

                // Function to fetch all data
                function fetchAllMenuData() {
                    fetch('/api/menu?limit=0') // Modify API to accept limit=0 for all records
                        .then(res => res.json())
                        .then(result => {
                            allMenuData = result.data;
                            initializeDataTable();
                        })
                        .catch(err => {
                            console.error("Error loading data:", err);
                        });
                }

                // Initialize DataTable with client-side processing
                function initializeDataTable() {
                    if ($.fn.DataTable.isDataTable('#menuTable')) {
                        $('#menuTable').DataTable().destroy();
                    }

                    menuTable = $('#menuTable').DataTable({
                        data: allMenuData,
                        pageLength: 10,
                        lengthMenu: [10, 25, 50, 100],
                        ordering: true,
                        serverSide: false,
                        processing: true,
                        searching: true,
                        columns: [
                            {
                                data: null,
                                render: (data, type, row, meta) => meta.row + 1
                            },
                            { data: "type" },
                            { data: "name" },
                            {
                                data: "url",
                                render: data => `/${data}`
                            },
                            { data: "priority" },
                            {
                                data: "is_show",
                                render: (data, type, row) => `
                            <div class="form-check form-switch">
                                <input class="form-check-input toggleShow" type="checkbox" 
                                    data-id="${row._id}" ${data ? "checked" : ""}>
                                <label class="form-check-label">
                                    ${data ? "Yes" : "No"}
                                </label>
                            </div>`
                            },
                            {
                                data: "add_date",
                                render: d => new Date(d).toLocaleDateString("en-IN")
                            },
                            {
                                data: "_id",
                                orderable: false,
                                render: id => `
                            <div class="action-icon d-inline-flex">
                                <a href="/menu/add/${id}" class="me-2"><i class="ti ti-edit"></i></a>
                                <a href="javascript:void(0);" onclick="confirmDelete('${id}')">
                                    <i class="ti ti-trash"></i>
                                </a>
                            </div>`
                            }
                        ],
                        language: {
                            search: "Search:",
                            lengthMenu: "Show _MENU_ entries",
                            info: "Showing _START_ to _END_ of _TOTAL_ entries",
                            infoEmpty: "Showing 0 to 0 of 0 entries",
                            infoFiltered: "(filtered from _MAX_ total entries)",
                            paginate: {
                                first: "First",
                                last: "Last",
                                next: "Next",
                                previous: "Previous"
                            }
                        }
                    });

                    // Move search box and entries dropdown
                    $('.dataTables_length').addClass(' me-3');
                    $('.dataTables_filter').addClass('');
                    $('.dataTables_wrapper').addClass('p-3');
                    $('#menuTable').addClass('mt-2');

                    // Handle toggle switch (re-attach after redraws)
                    menuTable.on('draw', function () {
                        attachToggleHandlers();
                    });

                    // Initial attachment
                    attachToggleHandlers();
                }

                // Function to attach toggle event handlers
                function attachToggleHandlers() {
                    $('.toggleShow').off('change').on('change', function () {
                        const menuId = $(this).data("id");
                        const checked = $(this).is(":checked");
                        const label = $(this).siblings("label");

                        fetch(`/api/menu/${menuId}/toggle-status`, {
                            method: "PATCH",
                            headers: { "Content-Type": "application/json" }
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    const index = allMenuData.findIndex(item => item._id === menuId);
                                    if (index !== -1) {
                                        allMenuData[index].is_show = data.data.is_show;
                                    }
                                    label.text(data.data.is_show ? "Yes" : "No");
                                    showToast("Status updated", "success");
                                } else {
                                    $(this).prop("checked", !checked);
                                    showToast("Error: " + data.message, "error");
                                }
                            })
                            .catch(err => {
                                console.error("Toggle error:", err);
                                $(this).prop("checked", !checked);
                                showToast("Server error", "error");
                            });
                    });
                }

                // Initial data fetch
                fetchAllMenuData();
            });
        </script>