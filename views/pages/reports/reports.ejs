<%- include('../../partials/header') %>
	<style>
		.sbtxt a {
			color: #007bff;
			text-decoration: none;
			font-weight: 500;
			cursor: pointer;
		}

		.sbtxt a:hover {
			text-decoration: underline;
		}
	</style>
	<!-- Page Wrapper -->
	<div class="page-wrapper">
		<div class="content">
			<!-- Breadcrumb -->
			<div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
				<div class="my-auto mb-2">
					<h2 class="mb-1">Reports</h2>
					<nav>
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item">
								<a href="#"><i class="ti ti-smart-home"></i></a>
							</li>
							<li class="breadcrumb-item">
								Dashboard
							</li>
							<li class="breadcrumb-item">
								Reports
							</li>
						</ol>
					</nav>
				</div>
			</div>
			<!-- /Breadcrumb -->

			<div class="row">
				<div class="seprate_crdhdr mb-4">
					<!-- Top Row: Upload Left, Search Right -->
					<div class="d-flex align-items-center justify-content-between mb-3">
						<h4 class="mb-3">Uploaded Documents</h4>
						<!-- Search Right -->
						<div class="position-relative" style="width: 400px;">
							<input type="text" name="q" class="form-control" placeholder="Search user">
							<span class="input-icon-addon">
								<i class="ti ti-search"></i>
							</span>
						</div>
					</div>


					<!-- Filters Section -->
					<div class="d-flex flex-wrap gap-2 align-items-center w-100 justify-content-between">
						<div class="select-dropdown flex-grow-1">
							<select id="roleSelect" class="select w-50">
								<option value="">Select Role</option>
								<% roles.forEach(role=> { %>
									<option value="<%= role %>">
										<%= role.charAt(0).toUpperCase() + role.slice(1) %>
									</option>
									<% }) %>
							</select>
						</div>
						<div class="select-dropdown flex-grow-1">
							<select id="department" class="form-select select2" style="width: 120px;">
								<option value="">Select Department</option>
							</select>
						</div>
						<div class="select-dropdown flex-grow-1">
							<select id="docTypeSelect" class="select w-100">
								<option value="" id="clear">Select Doc type</option>
								<% docTypes.forEach(doc=> { %>
									<option value="<%= doc.value %>">
										<%= doc.label %>
									</option>
									<% }) %>
							</select>
						</div>
						<div class="select-dropdown flex-grow-1">
							<!-- Select -->
							<select class="select2 w-70" id="designation_select">
								<option value="">Select Designation</option>
								<% designation.forEach(d=> { %>
									<option value="<%= d._id %>">
										<%= d.name.charAt(0).toUpperCase() + d.name.slice(1).toLowerCase() %>
									</option>
									<% }) %>
							</select>
						</div>
						<div class="input-icon-end position-relative flex-grow-1">
							<input type="text" class="form-control datetimepicker" placeholder="Select Date">
							<span class="input-icon-addon">
								<i class="ti ti-calendar text-gray-7"></i>
							</span>
						</div>
					</div>


					<div class="w-100 text-end pt-3">
						<button id="exportBtn" class="btn btn-primary btn-lg rounded-pill">
							<i class="ti ti-download"></i> Export Report
						</button>

						<p class="sbtxt gap-1 pt-2">
							<a href="#" class="export-link" data-format="xlsx">XLSX</a> /
							<a href="#" class="export-link" data-format="ods">ODS</a> /
							<a href="#" class="export-link" data-format="csv">CSV</a> /
							<a href="#" class="export-link" data-format="pdf">PDF</a>
						</p>
					</div>
				</div>

				<div class="col-xxl-12 col-xl-12">
					<div class="card flex-fill">
						<div class="card-body p-0">
							<div class="custom-datatable-filter table-responsive">
								<table id="documentsTable" class="table datatable">
									<thead>
										<tr>
											<th>File Name</th>
											<th>Owner</th>
											<th>Designation</th>
											<th>Department</th>
											<th>Role</th>
											<th>Approver</th>
											<th>Last Modified On</th>
											<th>Tags</th>
											<th>Meta data</th>
											<th>Shared with</th>
											<th>Created on</th>
											<th>Description</th>
											<th>Signature</th>
											<th>Status</th>
										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>

							</div>
						</div>
					</div>
				</div>
				<!-- /Projects -->
			</div>

		</div>

		<div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
			<p class="mb-0">2025 &copy; HLFPPT.</p>
			<p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
					Technology</a></p>
		</div>

	</div>
	<!-- /Page Wrapper -->



	<% } else if ({:condition}) { %>


		<%- include('../../partials/footer') %>
			<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
			<script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
			<script>
				$(document).ready(function () {
					// -------------------------
					// Initialize Select2 with Clear Option
					// -------------------------
					function initSelect2(selector, url, textKey) {
						$(selector).select2({
							placeholder: `Select Department`,
							allowClear: true,
							ajax: {
								url: url,
								dataType: 'json',
								delay: 250,
								data: params => ({ search: params.term }),
								processResults: data => {

									const results = [
										{ id: '', text: `-- Select Department --` },
										...data.data.map(item => ({
											id: item._id,
											text: item[textKey]
												.split(' ')
												.map(w => w.charAt(0).toUpperCase() + w.slice(1))
												.join(' ') // Capitalize each word
										}))
									];

									return { results };
								}
							}
						});

						// Handle empty selection
						$(selector).on('select2:select', function (e) {
							if (!e.params.data.id) {
								$(this).val(null).trigger('change');
							}
						});
					}

					initSelect2('#department', `${baseUrl}/api/departments/search`, 'name');
					$('#docTypeSelect').select2({
						placeholder: "Select Doc type",
						allowClear: false,              // no "x" button
						width: '100%',
						minimumResultsForSearch: 0,
						sorter: function (data) {
							// Keep placeholder at top
							return data.sort(function (a, b) {
								if (a.id === "") return -1; // always first
								if (b.id === "") return 1;
								return a.text.localeCompare(b.text);
							});
						}
					});

					// Handle selecting the placeholder to clear selection
					$('#clear').on('select2:select', function (e) {
						if ($(this).val() === "") {   // placeholder selected
							$(this).val(null).trigger('change.select2'); // reset selection
						}
					});

					$('#designation_select').select2({
						placeholder: 'Select Designation',
						allowClear: true
					});
					$('#roleSelect').select2({
						placeholder: "Select Role"
					});
					$('#documentsTable').DataTable({
						processing: true,
						serverSide: true,
						pageLength: 10,  // rows per page
						lengthMenu: [10, 25, 50, 100],
						ajax: {
							url: `${baseUrl}/api/documents`,
							type: 'GET',
							data: function (d) {
								// Convert DataTables params to your API query
								return {
									page: Math.ceil(d.start / d.length) + 1,
									limit: d.length,
									search: d.search.value,
									orderColumn: d.order.length ? d.order[0].column + 1 : undefined,
									orderDir: d.order.length ? d.order[0].dir : undefined
								};
							},
							dataSrc: function (json) {
								// Update DataTables paging info
								json.recordsTotal = json.data.pagination.totalDocuments;
								json.recordsFiltered = json.data.pagination.totalDocuments;

								// Map API data to table rows
								return json.data.documents.map(doc => ({
									fileName: `${doc.metadata.fileName} <br><small>${doc.files[0]?.fileSize ? (doc.files[0].fileSize / 1024).toFixed(2) + ' KB' : ''}</small>`,
									owner: doc.owner?.name || '',
									designation: doc.owner?.userDetails?.designation?.name
										? doc.owner.userDetails.designation.name.charAt(0).toUpperCase() +
										doc.owner.userDetails.designation.name.slice(1).toLowerCase()
										: '',
									department: doc.department?.name || '',
									role: 'Admin', // Adjust if needed
									approver: doc.projectManager || '',
									lastModified: new Date(doc.updatedAt).toLocaleString(),
									tags: doc.tags.join(', '),
									metadata: doc.metadata.fileDescription || '',
									sharedWith: doc.sharedWithUsers.map(u => u.name).join(', '),
									createdOn: new Date(doc.createdAt).toLocaleString(),
									description: doc.description
										? (() => {
											const text = doc.description.replace(/<\/?[^>]+(>|$)/g, '');
											return text.length > 100 ? text.substring(0, 30) + '....' : text;
										})()
										: '-',
									signature: `<img src="${doc.signature?.fileUrl || ''}" class="signimg" />`,
									status: `<span class="status-badge bg-soft-success">${doc.status}</span>`
								}));
							}
						},
						columns: [
							{ data: 'fileName' },
							{ data: 'owner' },
							{ data: 'designation' },
							{ data: 'department' },
							{ data: 'role' },
							{ data: 'approver' },
							{ data: 'lastModified' },
							{ data: 'tags' },
							{ data: 'metadata' },
							{ data: 'sharedWith' },
							{ data: 'createdOn' },
							{ data: 'description' },
							{ data: 'signature' },
							{ data: 'status' }
						],
						order: [[6, 'desc']] // default sort by Last Modified
					});
					// Handle export clicks (XLSX / CSV / PDF / ODS)
					$('.export-link').on('click', async function (e) {
						e.preventDefault();
						const format = $(this).data('format');

						// Collect filters from UI
						const filters = {
							role: $('#roleSelect').val(),
							department: $('#department').val(),
							docType: $('#docTypeSelect').val(),
							designation: $('#designation_select').val(),
							search: $('input[name="q"]').val(),
							date: $('.datetimepicker').val()
						};

						try {
							const response = await fetch(`${baseUrl}/api/export`, {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
									'Authorization': `Bearer ${localStorage.getItem('token') || ''}` // adjust auth
								},
								body: JSON.stringify({
									format,
									filters,
									exportAll: true // export all filtered documents
								})
							});

							if (!response.ok) {
								const error = await response.json();
								alert(`Export failed: ${error.message}`);
								return;
							}

							// Convert response to blob and trigger download
							const blob = await response.blob();
							const fileURL = window.URL.createObjectURL(blob);
							const a = document.createElement('a');
							a.href = fileURL;
							a.download = `documents-${Date.now()}.${format}`;
							document.body.appendChild(a);
							a.click();
							a.remove();

						} catch (err) {
							console.error('Export error:', err);
							alert('Something went wrong while exporting.');
						}
					});
					// ---------------------
					// Add Dynamic Filtering
					// ---------------------
					const table = $('#documentsTable').DataTable();

					// Re-fetch table data when filters change
					$('#roleSelect, #department, #docTypeSelect, #designation_select, .datetimepicker, input[name="q"]').on('change keyup', function () {
						table.ajax.reload();
					});

					// Modify the DataTable's existing AJAX call to include filters
					$('#documentsTable').DataTable().settings()[0].ajax.data = function (d) {
						return {
							page: Math.ceil(d.start / d.length) + 1,
							limit: d.length,
							search: $('input[name="q"]').val(),
							orderColumn: d.order.length ? d.order[0].column + 1 : undefined,
							orderDir: d.order.length ? d.order[0].dir : undefined,

							// Add filter parameters
							role: $('#roleSelect').val(),
							department: $('#department').val(),
							docType: $('#docTypeSelect').val(),
							designation: $('#designation_select').val(),
							date: $('.datetimepicker').val()
						};
					};

				});
			</script>