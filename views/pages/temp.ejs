<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Secure File Upload System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --success-color: #4cc9f0;
            --light-bg: #f8f9fa;
            --dark-bg: #212529;
        }

        body {
            background-color: #f5f7fb;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .card {
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            border: none;
            overflow: hidden;
        }

        .card-header {
            background: linear-gradient(120deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1.5rem;
        }

        .upload-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 2.5rem;
            text-align: center;
            transition: all 0.3s;
            background-color: var(--light-bg);
            cursor: pointer;
        }

        .upload-area:hover,
        .upload-area.dragover {
            border-color: var(--primary-color);
            background-color: #e9f0ff;
            transform: translateY(-2px);
        }

        .file-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .file-item {
            border-left: 4px solid var(--primary-color);
            transition: all 0.3s;
        }

        .file-item:hover {
            background-color: var(--light-bg);
            transform: translateX(5px);
        }

        .status-badge {
            font-size: 0.75rem;
            padding: 0.35em 0.65em;
        }

        .progress {
            height: 8px;
            border-radius: 4px;
        }

        .btn-primary {
            background: linear-gradient(120deg, var(--primary-color), var(--secondary-color));
            border: none;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
        }

        .btn-primary:hover {
            background: linear-gradient(120deg, var(--secondary-color), var(--primary-color));
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .status-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .list-group-item {
            border-left: 3px solid transparent;
            padding: 0.75rem 1.25rem;
        }

        .list-group-item.success {
            border-left-color: #28a745;
        }

        .list-group-item.error {
            border-left-color: #dc3545;
        }

        .list-group-item.info {
            border-left-color: #17a2b8;
        }

        .cleanup-info {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-top: 2rem;
        }

        .feature-icon {
            font-size: 1.5rem;
            color: var(--primary-color);
            margin-right: 0.5rem;
        }

        .spinner {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from {
                transform: rotate(0deg);
            }

            to {
                transform: rotate(360deg);
            }
        }

        .alert-position {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            min-width: 300px;
        }
    </style>
</head>

<body>
    <div class="container py-5">
        <div class="text-center mb-5">
            <h1 class="display-4 fw-bold text-primary mb-3">Secure File Upload System</h1>
            <p class="lead">Upload files with confidence. Files are temporarily stored and only uploaded to S3 upon form
                submission.</p>
        </div>

        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="card shadow-lg">
                    <div class="card-header">
                        <h4 class="mb-0"><i class="bi bi-cloud-upload"></i> Document Upload Form</h4>
                    </div>
                    <div class="card-body p-4">
                        <form id="documentForm" action="/api/files/temp-files" method="POST"
                            enctype="multipart/form-data">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="documentName" class="form-label fw-semibold">Document Name</label>
                                        <input type="text" class="form-control" id="documentName" name="documentName"
                                            placeholder="Enter document name" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="documentType" class="form-label fw-semibold">Document Type</label>
                                        <select class="form-select" id="documentType" name="documentType" required>
                                            <option value="">Select document type</option>
                                            <option value="invoice">Invoice</option>
                                            <option value="contract">Contract</option>
                                            <option value="report">Report</option>
                                            <option value="identity">Identity Proof</option>
                                            <option value="other">Other</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label fw-semibold">Upload File</label>
                                <div class="upload-area" id="uploadArea">
                                    <div class="mb-3">
                                        <i class="bi bi-cloud-arrow-up fs-1 text-primary"></i>
                                    </div>
                                    <p class="mb-2 fs-5">Drag & drop your file here</p>
                                    <p class="text-muted small mb-2">or</p>
                                    <input type="file" id="fileInput" name="file" class="d-none" required>
                                    <button type="button" class="btn btn-outline-primary rounded-pill" id="browseBtn">
                                        <i class="bi bi-search"></i> Browse Files
                                    </button>
                                    <p class="text-muted small mt-3">Max file size: 10MB</p>
                                </div>

                                <div class="mt-4" id="fileListContainer" style="display: none;">
                                    <h5 class="mb-3">Selected File</h5>
                                    <div class="file-list" id="fileList"></div>
                                </div>
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button type="button" class="btn btn-outline-secondary me-md-2" id="cancelBtn">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" id="submitBtn">
                                    <i class="bi bi-check-circle"></i> Submit Document
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="cleanup-info mt-4">
                    <h5><i class="bi bi-info-circle"></i> How It Works</h5>
                    <p>Your file is first stored temporarily in our database. Only when you submit the form is it
                        uploaded to AWS S3. Temporary files are automatically removed if:</p>
                    <ul>
                        <li>You cancel the upload</li>
                        <li>The form is not submitted within 2 hours</li>
                        <li>There's an error during processing</li>
                    </ul>
                </div>

                <div class="mt-5" id="uploadStatus" style="display: none;">
                    <h4 class="mb-4 border-bottom pb-2"><i class="bi bi-activity"></i> Upload Status</h4>
                    <div class="list-group status-list" id="statusList"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // UI Elements
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const browseBtn = document.getElementById('browseBtn');
        const fileListContainer = document.getElementById('fileListContainer');
        const fileList = document.getElementById('fileList');
        const documentForm = document.getElementById('documentForm');
        const submitBtn = document.getElementById('submitBtn');
        const cancelBtn = document.getElementById('cancelBtn');
        const uploadStatus = document.getElementById('uploadStatus');
        const statusList = document.getElementById('statusList');

        // State
        let selectedFile = null;
        let tempFileId = null;

        // Event Listeners
        browseBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect);
        uploadArea.addEventListener('click', () => fileInput.click());

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            if (e.dataTransfer.files.length) {
                handleFile(e.dataTransfer.files[0]);
                fileInput.files = e.dataTransfer.files;
            }
        });

        documentForm.addEventListener('submit', handleFormSubmit);
        cancelBtn.addEventListener('click', handleCancel);

        // Functions
        function handleFileSelect(e) {
            if (e.target.files.length) {
                handleFile(e.target.files[0]);
            }
        }

        function handleFile(file) {
            if (file.size > 10 * 1024 * 1024) {
                showAlert('File size exceeds 10MB limit', 'error');
                return;
            }

            selectedFile = file;
            displaySelectedFile(file);
        }

        function displaySelectedFile(file) {
            fileListContainer.style.display = 'block';
            fileList.innerHTML = `
                <div class="card file-item mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-file-text fs-3 text-primary me-3"></i>
                                <div>
                                    <h6 class="mb-1">${file.name}</h6>
                                    <p class="text-muted small mb-0">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
                                </div>
                            </div>
                            <span class="badge bg-secondary status-badge">Pending</span>
                        </div>
                    </div>
                </div>
            `;
        }

        async function handleFormSubmit(e) {
            e.preventDefault();

            if (!selectedFile) {
                showAlert('Please select a file first', 'error');
                return;
            }

            const documentName = document.getElementById('documentName').value;
            const documentType = document.getElementById('documentType').value;

            if (!documentName || !documentType) {
                showAlert('Please fill in all required fields', 'error');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="bi bi-arrow-repeat spinner"></i> Uploading...';

            addStatusMessage('Starting file upload process...', 'info');

            try {
                // Create FormData object
                const formData = new FormData(documentForm);

                // Send to backend
                const response = await fetch('/api/files/temp-files', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    tempFileId = result.id;
                    addStatusMessage('File metadata stored temporarily', 'success');

                    // Now upload to S3
                    addStatusMessage('Uploading to S3...', 'info');

                    const uploadResponse = await fetch(`/api/files/presigned-url/${tempFileId}`);
                    const uploadResult = await uploadResponse.json();

                    if (uploadResult.success) {
                        // Simulate upload progress (in real implementation, you would use the presigned URL)
                        for (let progress = 0; progress <= 100; progress += 10) {
                            await new Promise(resolve => setTimeout(resolve, 300));
                            addStatusMessage(`Upload progress: ${progress}%`, 'info');
                        }

                        // Update status to uploaded
                        const updateResponse = await fetch(`/api/files/temp-files/${tempFileId}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status: 'uploaded' })
                        });

                        const updateResult = await updateResponse.json();

                        if (updateResult.success) {
                            addStatusMessage('File successfully uploaded to S3!', 'success');
                            showAlert('Document submitted successfully!', 'success');
                            resetForm();
                        } else {
                            throw new Error('Failed to update file status');
                        }
                    } else {
                        throw new Error('Failed to get upload URL');
                    }
                } else {
                    throw new Error(result.error || 'Failed to store file metadata');
                }
            } catch (error) {
                console.error('Error uploading file:', error);
                addStatusMessage('Error uploading file: ' + error.message, 'error');
                showAlert('Upload failed. Please try again.', 'error');

                // Update status to failed if we have a tempFileId
                if (tempFileId) {
                    try {
                        await fetch(`/api/files/temp-files/${tempFileId}`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ status: 'failed' })
                        });
                    } catch (updateError) {
                        console.error('Error updating status to failed:', updateError);
                    }
                }
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="bi bi-check-circle"></i> Submit Document';
            }
        }

        async function handleCancel() {
            if (tempFileId) {
                addStatusMessage('Cancelling upload and cleaning up temporary data...', 'info');

                try {
                    const response = await fetch(`/api/files/temp-files/${tempFileId}`, {
                        method: 'DELETE'
                    });
                    console.log("uploaded")
                    const result = await response.json();

                    if (result.success) {
                        addStatusMessage('Temporary data removed successfully.', 'info');
                    } else {
                        throw new Error(result.error || 'Failed to remove temporary data');
                    }
                } catch (error) {
                    console.error('Error cancelling upload:', error);
                    addStatusMessage('Error removing temporary data: ' + error.message, 'error');
                }
            }

            resetForm();
            showAlert('Upload cancelled', 'info');
        }

        function resetForm() {
            documentForm.reset();
            fileListContainer.style.display = 'none';
            fileList.innerHTML = '';
            selectedFile = null;
            tempFileId = null;

            // Hide status after a delay
            setTimeout(() => {
                uploadStatus.style.display = 'none';
                statusList.innerHTML = '';
            }, 5000);
        }

        function addStatusMessage(message, type) {
            uploadStatus.style.display = 'block';

            const messageEl = document.createElement('div');
            messageEl.className = `list-group-item list-group-item-action ${type}`;

            const icon = type === 'error' ? 'exclamation-circle' :
                type === 'success' ? 'check-circle' : 'info-circle';

            messageEl.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-${icon} me-2 text-${type}"></i>
                    <span class="flex-grow-1">${new Date().toLocaleTimeString()} - ${message}</span>
                    <span class="badge bg-${type} rounded-pill">${type}</span>
                </div>
            `;

            statusList.appendChild(messageEl);
            statusList.scrollTop = statusList.scrollHeight;
        }

        function showAlert(message, type) {
            // Remove any existing alerts
            const existingAlert = document.querySelector('.alert-position');
            if (existingAlert) {
                existingAlert.remove();
            }

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show alert-position`;
            alertDiv.innerHTML = `
                <strong>${type.charAt(0).toUpperCase() + type.slice(1)}!</strong> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            document.body.appendChild(alertDiv);

            // Auto dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>