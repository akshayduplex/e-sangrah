<%- include('../partials/header') %>

	<!-- Page Wrapper -->
	<div class="page-wrapper">
		<div class="content">
			<!-- Breadcrumb -->
			<div class="d-flex align-items-center justify-content-between page-breadcrumb mb-3">
				<div class="my-auto mb-2">
					<h2 class="mb-1">Upload Folder</h2>
					<nav>
						<ol class="breadcrumb mb-0">
							<li class="breadcrumb-item">
								<a href="#"><i class="ti ti-smart-home"></i></a>
							</li>
							<li class="breadcrumb-item">
								Dashboard
							</li>
							<li class="breadcrumb-item">
								Upload Folder
							</li>
						</ol>
					</nav>
				</div>
			</div>
			<!-- /Breadcrumb -->
			<div class="my-4">
				<div class="col-md-12">
					<div class="upload-box mb-3" id="uploadBox">
						<i class="ti ti-cloud-upload fa-2x text-primary mb-2"></i>
						<p class="mb-1"><strong>Click to upload folder</strong> or drag and drop file here</p>
						<small class="text-muted">Max 10GB total storage. DOCX / PPTX / CSV / PDF</small>
						<input type="file" class="form-control d-none" id="fileInput" multiple>
					</div>
					<div id="fileList"></div>
				</div>
				<div class="col-md-12 ">
					<div class="my-4">
						<button class="btn btn-primary rounded-pill">Upload Folder</button>
					</div>
				</div>
			</div>
		</div>
		<div class="footer mt-4 d-sm-flex align-items-center justify-content-between border-top bg-white p-3">
			<p class="mb-0">2025 &copy; HLFPPT.</p>
			<p>Designed & Developed by <a href="javascript:void(0);" class="text-primary">Duplex services &
					Technology</a></p>
		</div>
	</div>
	<!-- /Page Wrapper -->

	<%- include('../partials/footer') %>


		<script>
			const uploadBox = document.getElementById("uploadBox");
			const fileInput = document.getElementById("fileInput");
			const fileList = document.getElementById("fileList");

			// Open file dialog on click
			uploadBox.addEventListener("click", () => fileInput.click());

			// Handle file selection
			fileInput.addEventListener("change", () => handleFiles(fileInput.files));

			// Drag and drop events
			uploadBox.addEventListener("dragover", (e) => {
				e.preventDefault();
				uploadBox.classList.add("dragover");
			});

			uploadBox.addEventListener("dragleave", () => {
				uploadBox.classList.remove("dragover");
			});

			uploadBox.addEventListener("drop", (e) => {
				e.preventDefault();
				uploadBox.classList.remove("dragover");
				handleFiles(e.dataTransfer.files);
			});

			// Handle uploaded files
			function handleFiles(files) {
				[...files].forEach((file) => {
					const fileId = Date.now() + Math.random(); // unique id
					const fileItem = document.createElement("div");
					fileItem.classList.add("file-item");
					fileItem.classList.add("col-sm-5");
					fileItem.setAttribute("data-id", fileId);

					// Choose icon based on type
					let iconClass = "fa-folder";
					if (file.type.includes("word")) iconClass = "fa-file-word text-primary";
					else if (file.type.includes("pdf")) iconClass = "fa-file-pdf text-danger";
					else if (file.type.includes("presentation") || file.name.endsWith(".ppt") || file.name.endsWith(".pptx")) iconClass = "fa-file-powerpoint text-warning";
					else if (file.type.includes("sheet") || file.name.endsWith(".xls") || file.name.endsWith(".xlsx")) iconClass = "fa-file-excel text-success";

					fileItem.innerHTML = `
	        <div class="file-info">
	          <i class="fa-solid ${iconClass} fa-2x"></i>
	          <div>
	            <h6 class="mb-0">${file.name}</h6>
	            <small class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</small>
	          </div>
	        </div>
	        <div class="file-progress">
	          <div class="progress">
	            <div class="progress-bar bg-success" role="progressbar" style="width: 0%">0%</div>
	          </div>
	        </div>
	        <button class="remove-btn"><i class="fa-solid fa-xmark"></i></button>
      `;

					fileList.appendChild(fileItem);

					// Fake progress animation
					let progress = 0;
					const interval = setInterval(() => {
						if (progress >= 100) {
							clearInterval(interval);
						} else {
							progress += 10;
							const progressBar = fileItem.querySelector(".progress-bar");
							progressBar.style.width = progress + "%";
							progressBar.textContent = progress + "%";
						}
					}, 200);

					// Remove file
					fileItem.querySelector(".remove-btn").addEventListener("click", () => {
						fileItem.remove();
					});
				});
			}
		</script>